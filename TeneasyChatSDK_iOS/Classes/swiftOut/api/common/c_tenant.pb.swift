// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/common/c_tenant.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 通用配置状态
public enum Api_Common_CommonConfigStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// @String(未知)
  case vcsUnknown // = 0

  /// @String(启用)
  case vcsEnable // = 1

  /// @String(禁用)
  case vcsDisable // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .vcsUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .vcsUnknown
    case 1: self = .vcsEnable
    case 2: self = .vcsDisable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .vcsUnknown: return 0
    case .vcsEnable: return 1
    case .vcsDisable: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_CommonConfigStatus] = [
    .vcsUnknown,
    .vcsEnable,
    .vcsDisable,
  ]

}

/// 是否超管
public enum Api_Common_TenantIsSuper: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 默认
  case isSuperDefault // = 0

  /// 否
  case isSuperNo // = 1

  /// 是
  case isSuperYes // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .isSuperDefault
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .isSuperDefault
    case 1: self = .isSuperNo
    case 2: self = .isSuperYes
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .isSuperDefault: return 0
    case .isSuperNo: return 1
    case .isSuperYes: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_TenantIsSuper] = [
    .isSuperDefault,
    .isSuperNo,
    .isSuperYes,
  ]

}

/// 商户复制类型
public enum Api_Common_TenantCopyType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 未知
  case tctUnknown // = 0

  /// uid
  case tctUid // = 1

  /// 用户账号
  case tctAccount // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .tctUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .tctUnknown
    case 1: self = .tctUid
    case 2: self = .tctAccount
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .tctUnknown: return 0
    case .tctUid: return 1
    case .tctAccount: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_TenantCopyType] = [
    .tctUnknown,
    .tctUid,
    .tctAccount,
  ]

}

/// 预警类型
public enum Api_Common_TenantWarnEventType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// 未知
  case warnUnknown // = 0

  /// 离岗时长
  case warnLeaveTime // = 1

  /// 离岗次数
  case warnLeaveCount // = 2

  /// 待回复用户数
  case warnWaitReply // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .warnUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .warnUnknown
    case 1: self = .warnLeaveTime
    case 2: self = .warnLeaveCount
    case 3: self = .warnWaitReply
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .warnUnknown: return 0
    case .warnLeaveTime: return 1
    case .warnLeaveCount: return 2
    case .warnWaitReply: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_TenantWarnEventType] = [
    .warnUnknown,
    .warnLeaveTime,
    .warnLeaveCount,
    .warnWaitReply,
  ]

}

/// 预警弹框格式
public struct Api_Common_WarnInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 告警类型
  public var warnType: Api_Common_TenantWarnEventType = .warnUnknown

  /// 客服名
  public var name: String = String()

  /// 客服账号
  public var account: String = String()

  /// 商户ID
  public var tenantID: Int32 = 0

  /// 客服id
  public var workerID: Int32 = 0

  /// 触发阈值
  public var threshold: Int32 = 0

  /// 累计次数
  public var times: Int32 = 0

  /// 创建时间
  public var createTime: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// ws建立连接请求扩展字段
public struct Api_Common_WSConnCustom: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户账号
  public var username: String = String()

  /// 用户平台 1-IOS 2-Android 3-H5 4-WEB_IOS 5-WEB_WINDOWS 6-WINDOWS 7-MAC
  public var platform: Int32 = 0

  /// 用户层级标识
  public var userlevel: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 商户线路组
public struct Api_Common_TenantsLineGroup: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  /// 线路组名称
  public var name: String = String()

  /// H5线路
  public var h5Lines: CommonListString {
    get {return _h5Lines ?? CommonListString()}
    set {_h5Lines = newValue}
  }
  /// Returns true if `h5Lines` has been explicitly set.
  public var hasH5Lines: Bool {return self._h5Lines != nil}
  /// Clears the value of `h5Lines`. Subsequent reads from it will return its default value.
  public mutating func clearH5Lines() {self._h5Lines = nil}

  /// 后台线路
  public var backgroundLines: CommonListString {
    get {return _backgroundLines ?? CommonListString()}
    set {_backgroundLines = newValue}
  }
  /// Returns true if `backgroundLines` has been explicitly set.
  public var hasBackgroundLines: Bool {return self._backgroundLines != nil}
  /// Clears the value of `backgroundLines`. Subsequent reads from it will return its default value.
  public mutating func clearBackgroundLines() {self._backgroundLines = nil}

  /// 操作人
  public var operateUid: Int32 = 0

  /// 描述
  public var description_p: String = String()

  /// 创建时间
  public var createAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createAt = newValue}
  }
  /// Returns true if `createAt` has been explicitly set.
  public var hasCreateAt: Bool {return self._createAt != nil}
  /// Clears the value of `createAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreateAt() {self._createAt = nil}

  /// 更新时间
  public var updateAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateAt = newValue}
  }
  /// Returns true if `updateAt` has been explicitly set.
  public var hasUpdateAt: Bool {return self._updateAt != nil}
  /// Clears the value of `updateAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateAt() {self._updateAt = nil}

  /// 删除时间, 软删除标记
  public var deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _deleteAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_deleteAt = newValue}
  }
  /// Returns true if `deleteAt` has been explicitly set.
  public var hasDeleteAt: Bool {return self._deleteAt != nil}
  /// Clears the value of `deleteAt`. Subsequent reads from it will return its default value.
  public mutating func clearDeleteAt() {self._deleteAt = nil}

  /// 操作人name
  public var operateName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _h5Lines: CommonListString? = nil
  fileprivate var _backgroundLines: CommonListString? = nil
  fileprivate var _createAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// 商户后台路由
public struct Api_Common_TenantRoute: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  /// name
  public var name: String = String()

  /// url
  public var url: String = String()

  /// pid
  public var pid: Int32 = 0

  /// sort
  public var sort: Int32 = 0

  /// 创建时间
  public var createAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createAt = newValue}
  }
  /// Returns true if `createAt` has been explicitly set.
  public var hasCreateAt: Bool {return self._createAt != nil}
  /// Clears the value of `createAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreateAt() {self._createAt = nil}

  /// 更新时间
  public var updateAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateAt = newValue}
  }
  /// Returns true if `updateAt` has been explicitly set.
  public var hasUpdateAt: Bool {return self._updateAt != nil}
  /// Clears the value of `updateAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateAt() {self._updateAt = nil}

  /// is_bind
  public var bindingStatus: CommonBindStatus = .default

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// 商户后台路由
public struct Api_Common_TenantRouteWithItem: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  /// name
  public var name: String = String()

  /// url
  public var url: String = String()

  /// pid
  public var pid: Int32 = 0

  /// sort
  public var sort: Int32 = 0

  /// 创建时间
  public var createAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createAt = newValue}
  }
  /// Returns true if `createAt` has been explicitly set.
  public var hasCreateAt: Bool {return self._createAt != nil}
  /// Clears the value of `createAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreateAt() {self._createAt = nil}

  /// 更新时间
  public var updateAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateAt = newValue}
  }
  /// Returns true if `updateAt` has been explicitly set.
  public var hasUpdateAt: Bool {return self._updateAt != nil}
  /// Clears the value of `updateAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateAt() {self._updateAt = nil}

  /// 子路由列表
  public var items: [Api_Common_TenantRoute] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// 商户后台角色表
public struct Api_Common_TenantRole: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  /// name
  public var name: String = String()

  /// is_super
  public var isSuper: Api_Common_TenantIsSuper = .isSuperDefault

  /// 创建时间
  public var createAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createAt = newValue}
  }
  /// Returns true if `createAt` has been explicitly set.
  public var hasCreateAt: Bool {return self._createAt != nil}
  /// Clears the value of `createAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreateAt() {self._createAt = nil}

  /// 更新时间
  public var updateAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateAt = newValue}
  }
  /// Returns true if `updateAt` has been explicitly set.
  public var hasUpdateAt: Bool {return self._updateAt != nil}
  /// Clears the value of `updateAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateAt() {self._updateAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// 商户后台角色路由绑定表
public struct Api_Common_TenantRoleRoute: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// role_id
  public var roleID: Int32 = 0

  /// route_id
  public var routeID: Int32 = 0

  /// route_url
  public var routeURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 商户后台管理员表
public struct Api_Common_TenantManager: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  /// account
  public var account: String = String()

  /// password
  public var password: String = String()

  /// role_id
  public var roleID: Int32 = 0

  /// status
  public var status: CommonDisableStatus = .default

  /// 创建时间
  public var createAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createAt = newValue}
  }
  /// Returns true if `createAt` has been explicitly set.
  public var hasCreateAt: Bool {return self._createAt != nil}
  /// Clears the value of `createAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreateAt() {self._createAt = nil}

  /// 更新时间
  public var updateAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateAt = newValue}
  }
  /// Returns true if `updateAt` has been explicitly set.
  public var hasUpdateAt: Bool {return self._updateAt != nil}
  /// Clears the value of `updateAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateAt() {self._updateAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.common"

extension Api_Common_CommonConfigStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VCS_UNKNOWN"),
    1: .same(proto: "VCS_ENABLE"),
    2: .same(proto: "VCS_DISABLE"),
  ]
}

extension Api_Common_TenantIsSuper: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IS_SUPER_DEFAULT"),
    1: .same(proto: "IS_SUPER_NO"),
    2: .same(proto: "IS_SUPER_YES"),
  ]
}

extension Api_Common_TenantCopyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TCT_UNKNOWN"),
    1: .same(proto: "TCT_UID"),
    2: .same(proto: "TCT_ACCOUNT"),
  ]
}

extension Api_Common_TenantWarnEventType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Warn_Unknown"),
    1: .same(proto: "Warn_Leave_Time"),
    2: .same(proto: "Warn_leave_Count"),
    3: .same(proto: "Warn_Wait_Reply"),
  ]
}

extension Api_Common_WarnInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WarnInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "warn_type"),
    2: .same(proto: "name"),
    3: .same(proto: "account"),
    4: .standard(proto: "tenant_id"),
    5: .standard(proto: "worker_id"),
    7: .same(proto: "threshold"),
    8: .same(proto: "times"),
    9: .standard(proto: "create_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.warnType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.account) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.tenantID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.workerID) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.threshold) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.times) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.createTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.warnType != .warnUnknown {
      try visitor.visitSingularEnumField(value: self.warnType, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 3)
    }
    if self.tenantID != 0 {
      try visitor.visitSingularInt32Field(value: self.tenantID, fieldNumber: 4)
    }
    if self.workerID != 0 {
      try visitor.visitSingularInt32Field(value: self.workerID, fieldNumber: 5)
    }
    if self.threshold != 0 {
      try visitor.visitSingularInt32Field(value: self.threshold, fieldNumber: 7)
    }
    if self.times != 0 {
      try visitor.visitSingularInt32Field(value: self.times, fieldNumber: 8)
    }
    if !self.createTime.isEmpty {
      try visitor.visitSingularStringField(value: self.createTime, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_WarnInfo, rhs: Api_Common_WarnInfo) -> Bool {
    if lhs.warnType != rhs.warnType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.account != rhs.account {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.workerID != rhs.workerID {return false}
    if lhs.threshold != rhs.threshold {return false}
    if lhs.times != rhs.times {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_WSConnCustom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WSConnCustom"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .same(proto: "platform"),
    3: .same(proto: "userlevel"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.platform) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.userlevel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if self.platform != 0 {
      try visitor.visitSingularInt32Field(value: self.platform, fieldNumber: 2)
    }
    if self.userlevel != 0 {
      try visitor.visitSingularUInt32Field(value: self.userlevel, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_WSConnCustom, rhs: Api_Common_WSConnCustom) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.userlevel != rhs.userlevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_TenantsLineGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TenantsLineGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "h5_lines"),
    4: .standard(proto: "background_lines"),
    5: .standard(proto: "operate_uid"),
    6: .same(proto: "description"),
    7: .standard(proto: "create_at"),
    8: .standard(proto: "update_at"),
    9: .standard(proto: "delete_at"),
    10: .standard(proto: "operate_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._h5Lines) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._backgroundLines) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.operateUid) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createAt) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._updateAt) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._deleteAt) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.operateName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try { if let v = self._h5Lines {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._backgroundLines {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.operateUid != 0 {
      try visitor.visitSingularInt32Field(value: self.operateUid, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    try { if let v = self._createAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._updateAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._deleteAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !self.operateName.isEmpty {
      try visitor.visitSingularStringField(value: self.operateName, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_TenantsLineGroup, rhs: Api_Common_TenantsLineGroup) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._h5Lines != rhs._h5Lines {return false}
    if lhs._backgroundLines != rhs._backgroundLines {return false}
    if lhs.operateUid != rhs.operateUid {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._createAt != rhs._createAt {return false}
    if lhs._updateAt != rhs._updateAt {return false}
    if lhs._deleteAt != rhs._deleteAt {return false}
    if lhs.operateName != rhs.operateName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_TenantRoute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TenantRoute"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "url"),
    4: .same(proto: "pid"),
    5: .same(proto: "sort"),
    6: .standard(proto: "create_at"),
    7: .standard(proto: "update_at"),
    8: .same(proto: "bindingStatus"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pid) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.sort) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createAt) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._updateAt) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.bindingStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if self.pid != 0 {
      try visitor.visitSingularInt32Field(value: self.pid, fieldNumber: 4)
    }
    if self.sort != 0 {
      try visitor.visitSingularInt32Field(value: self.sort, fieldNumber: 5)
    }
    try { if let v = self._createAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._updateAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.bindingStatus != .default {
      try visitor.visitSingularEnumField(value: self.bindingStatus, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_TenantRoute, rhs: Api_Common_TenantRoute) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.url != rhs.url {return false}
    if lhs.pid != rhs.pid {return false}
    if lhs.sort != rhs.sort {return false}
    if lhs._createAt != rhs._createAt {return false}
    if lhs._updateAt != rhs._updateAt {return false}
    if lhs.bindingStatus != rhs.bindingStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_TenantRouteWithItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TenantRouteWithItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "url"),
    4: .same(proto: "pid"),
    5: .same(proto: "sort"),
    6: .standard(proto: "create_at"),
    7: .standard(proto: "update_at"),
    9: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pid) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.sort) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createAt) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._updateAt) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if self.pid != 0 {
      try visitor.visitSingularInt32Field(value: self.pid, fieldNumber: 4)
    }
    if self.sort != 0 {
      try visitor.visitSingularInt32Field(value: self.sort, fieldNumber: 5)
    }
    try { if let v = self._createAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._updateAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_TenantRouteWithItem, rhs: Api_Common_TenantRouteWithItem) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.url != rhs.url {return false}
    if lhs.pid != rhs.pid {return false}
    if lhs.sort != rhs.sort {return false}
    if lhs._createAt != rhs._createAt {return false}
    if lhs._updateAt != rhs._updateAt {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_TenantRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TenantRole"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "is_super"),
    4: .standard(proto: "create_at"),
    5: .standard(proto: "update_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.isSuper) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createAt) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.isSuper != .isSuperDefault {
      try visitor.visitSingularEnumField(value: self.isSuper, fieldNumber: 3)
    }
    try { if let v = self._createAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._updateAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_TenantRole, rhs: Api_Common_TenantRole) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.isSuper != rhs.isSuper {return false}
    if lhs._createAt != rhs._createAt {return false}
    if lhs._updateAt != rhs._updateAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_TenantRoleRoute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TenantRoleRoute"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "role_id"),
    2: .standard(proto: "route_id"),
    3: .standard(proto: "route_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.roleID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.routeID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.routeURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.roleID != 0 {
      try visitor.visitSingularInt32Field(value: self.roleID, fieldNumber: 1)
    }
    if self.routeID != 0 {
      try visitor.visitSingularInt32Field(value: self.routeID, fieldNumber: 2)
    }
    if !self.routeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.routeURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_TenantRoleRoute, rhs: Api_Common_TenantRoleRoute) -> Bool {
    if lhs.roleID != rhs.roleID {return false}
    if lhs.routeID != rhs.routeID {return false}
    if lhs.routeURL != rhs.routeURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_TenantManager: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TenantManager"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "account"),
    3: .same(proto: "password"),
    4: .standard(proto: "role_id"),
    5: .same(proto: "status"),
    6: .standard(proto: "create_at"),
    7: .standard(proto: "update_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.account) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.roleID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createAt) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._updateAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 2)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 3)
    }
    if self.roleID != 0 {
      try visitor.visitSingularInt32Field(value: self.roleID, fieldNumber: 4)
    }
    if self.status != .default {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 5)
    }
    try { if let v = self._createAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._updateAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_TenantManager, rhs: Api_Common_TenantManager) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.account != rhs.account {return false}
    if lhs.password != rhs.password {return false}
    if lhs.roleID != rhs.roleID {return false}
    if lhs.status != rhs.status {return false}
    if lhs._createAt != rhs._createAt {return false}
    if lhs._updateAt != rhs._updateAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
