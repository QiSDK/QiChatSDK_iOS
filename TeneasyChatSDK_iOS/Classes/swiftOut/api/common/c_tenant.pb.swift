// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/common/c_tenant.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 商户线路组
public struct Api_Common_TenantsLineGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  /// 线路组名称
  public var name: String = String()

  /// H5线路
  public var h5Lines: CommonListString {
    get {return _h5Lines ?? CommonListString()}
    set {_h5Lines = newValue}
  }
  /// Returns true if `h5Lines` has been explicitly set.
  public var hasH5Lines: Bool {return self._h5Lines != nil}
  /// Clears the value of `h5Lines`. Subsequent reads from it will return its default value.
  public mutating func clearH5Lines() {self._h5Lines = nil}

  /// 后台线路
  public var backgroundLines: CommonListString {
    get {return _backgroundLines ?? CommonListString()}
    set {_backgroundLines = newValue}
  }
  /// Returns true if `backgroundLines` has been explicitly set.
  public var hasBackgroundLines: Bool {return self._backgroundLines != nil}
  /// Clears the value of `backgroundLines`. Subsequent reads from it will return its default value.
  public mutating func clearBackgroundLines() {self._backgroundLines = nil}

  /// 操作人
  public var operateUid: Int32 = 0

  /// 描述
  public var description_p: String = String()

  /// 创建时间
  public var createAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createAt = newValue}
  }
  /// Returns true if `createAt` has been explicitly set.
  public var hasCreateAt: Bool {return self._createAt != nil}
  /// Clears the value of `createAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreateAt() {self._createAt = nil}

  /// 更新时间
  public var updateAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateAt = newValue}
  }
  /// Returns true if `updateAt` has been explicitly set.
  public var hasUpdateAt: Bool {return self._updateAt != nil}
  /// Clears the value of `updateAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateAt() {self._updateAt = nil}

  /// 删除时间, 软删除标记
  public var deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _deleteAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_deleteAt = newValue}
  }
  /// Returns true if `deleteAt` has been explicitly set.
  public var hasDeleteAt: Bool {return self._deleteAt != nil}
  /// Clears the value of `deleteAt`. Subsequent reads from it will return its default value.
  public mutating func clearDeleteAt() {self._deleteAt = nil}

  /// 操作人name
  public var operateName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _h5Lines: CommonListString? = nil
  fileprivate var _backgroundLines: CommonListString? = nil
  fileprivate var _createAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Common_TenantsLineGroup: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.common"

extension Api_Common_TenantsLineGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TenantsLineGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "h5_lines"),
    4: .standard(proto: "background_lines"),
    5: .standard(proto: "operate_uid"),
    6: .same(proto: "description"),
    7: .standard(proto: "create_at"),
    8: .standard(proto: "update_at"),
    9: .standard(proto: "delete_at"),
    10: .standard(proto: "operate_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._h5Lines) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._backgroundLines) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.operateUid) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createAt) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._updateAt) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._deleteAt) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.operateName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try { if let v = self._h5Lines {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._backgroundLines {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.operateUid != 0 {
      try visitor.visitSingularInt32Field(value: self.operateUid, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    try { if let v = self._createAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._updateAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._deleteAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !self.operateName.isEmpty {
      try visitor.visitSingularStringField(value: self.operateName, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_TenantsLineGroup, rhs: Api_Common_TenantsLineGroup) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._h5Lines != rhs._h5Lines {return false}
    if lhs._backgroundLines != rhs._backgroundLines {return false}
    if lhs.operateUid != rhs.operateUid {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._createAt != rhs._createAt {return false}
    if lhs._updateAt != rhs._updateAt {return false}
    if lhs._deleteAt != rhs._deleteAt {return false}
    if lhs.operateName != rhs.operateName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
