// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/common/c_error_report.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Api_Common_CodeType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case `default` // = 0

  /// 接口错误
  case interface // = 1

  /// 服务错误
  case gateway // = 2

  /// 网络错误
  case internet // = 3

  /// 前端错误
  case frontend // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .interface
    case 2: self = .gateway
    case 3: self = .internet
    case 4: self = .frontend
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .interface: return 1
    case .gateway: return 2
    case .internet: return 3
    case .frontend: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_CodeType] = [
    .default,
    .interface,
    .gateway,
    .internet,
    .frontend,
  ]

}

public enum Api_Common_Platform: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case `default` // = 0

  /// IOS
  case ios // = 1

  /// 安卓
  case android // = 2

  /// H5
  case h5 // = 3

  /// Platform_WEB_IOS
  case webIos // = 4

  /// Platform_WEB_WINDOWS
  case webWindows // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .ios
    case 2: self = .android
    case 3: self = .h5
    case 4: self = .webIos
    case 5: self = .webWindows
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .ios: return 1
    case .android: return 2
    case .h5: return 3
    case .webIos: return 4
    case .webWindows: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_Platform] = [
    .default,
    .ios,
    .android,
    .h5,
    .webIos,
    .webWindows,
  ]

}

/// 接口错误结构
public struct Api_Common_ErrorReport: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tenantID: Int32 = 0

  public var url: String = String()

  public var code: Int32 = 0

  public var payload: String = String()

  public var codeType: Api_Common_CodeType = .default

  public var ip: String = String()

  public var platform: Api_Common_Platform = .default

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// 错误上传参数
public struct Api_Common_ErrorReportUpload: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var code: Int32 = 0

  public var payload: String = String()

  public var ip: String = String()

  public var platform: Api_Common_Platform = .default

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.common"

extension Api_Common_CodeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CodeType_DEFAULT"),
    1: .same(proto: "CodeType_INTERFACE"),
    2: .same(proto: "CodeType_GATEWAY"),
    3: .same(proto: "CodeType_INTERNET"),
    4: .same(proto: "CodeType_FRONTEND"),
  ]
}

extension Api_Common_Platform: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Platform_DEFAULT"),
    1: .same(proto: "Platform_IOS"),
    2: .same(proto: "Platform_ANDROID"),
    3: .same(proto: "Platform_H5"),
    4: .same(proto: "Platform_WEB_IOS"),
    5: .same(proto: "Platform_WEB_WINDOWS"),
  ]
}

extension Api_Common_ErrorReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "tenant_id"),
    3: .same(proto: "url"),
    4: .same(proto: "code"),
    5: .same(proto: "payload"),
    6: .standard(proto: "code_type"),
    7: .same(proto: "ip"),
    8: .same(proto: "platform"),
    9: .standard(proto: "created_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.tenantID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.payload) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.codeType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.ip) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.platform) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.tenantID != 0 {
      try visitor.visitSingularInt32Field(value: self.tenantID, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 4)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 5)
    }
    if self.codeType != .default {
      try visitor.visitSingularEnumField(value: self.codeType, fieldNumber: 6)
    }
    if !self.ip.isEmpty {
      try visitor.visitSingularStringField(value: self.ip, fieldNumber: 7)
    }
    if self.platform != .default {
      try visitor.visitSingularEnumField(value: self.platform, fieldNumber: 8)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_ErrorReport, rhs: Api_Common_ErrorReport) -> Bool {
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.code != rhs.code {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.codeType != rhs.codeType {return false}
    if lhs.ip != rhs.ip {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_ErrorReportUpload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorReportUpload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "url"),
    4: .same(proto: "code"),
    5: .same(proto: "payload"),
    7: .same(proto: "ip"),
    8: .same(proto: "platform"),
    9: .standard(proto: "created_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.payload) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.ip) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.platform) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 4)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 5)
    }
    if !self.ip.isEmpty {
      try visitor.visitSingularStringField(value: self.ip, fieldNumber: 7)
    }
    if self.platform != .default {
      try visitor.visitSingularEnumField(value: self.platform, fieldNumber: 8)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_ErrorReportUpload, rhs: Api_Common_ErrorReportUpload) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.code != rhs.code {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.ip != rhs.ip {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
