// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/core/chat_quality.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Api_Core_QualityWorkerReportSortParam: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 分配单量
  case checkCount // = 0

  /// 完成单量
  case finishedCount // = 1

  /// 完成率
  case finishedRate // = 2

  /// 联检数
  case combineCheckCount // = 3

  /// 必检数
  case mustCheckCount // = 4

  /// 复审单量
  case reviewCheckCount // = 5

  /// 复审率
  case reviewCheckRate // = 6

  /// 极差
  case veryBadCount // = 7

  /// 较差
  case badCount // = 8

  /// 正常
  case normalCount // = 9

  /// 优异
  case excellentCount // = 10

  /// 合格率
  case qualifiedRate // = 11

  /// 总质检时长
  case totalCheckDuration // = 12

  /// 平均质检时长
  case avgCheckDuration // = 13
  case UNRECOGNIZED(Int)

  public init() {
    self = .checkCount
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .checkCount
    case 1: self = .finishedCount
    case 2: self = .finishedRate
    case 3: self = .combineCheckCount
    case 4: self = .mustCheckCount
    case 5: self = .reviewCheckCount
    case 6: self = .reviewCheckRate
    case 7: self = .veryBadCount
    case 8: self = .badCount
    case 9: self = .normalCount
    case 10: self = .excellentCount
    case 11: self = .qualifiedRate
    case 12: self = .totalCheckDuration
    case 13: self = .avgCheckDuration
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .checkCount: return 0
    case .finishedCount: return 1
    case .finishedRate: return 2
    case .combineCheckCount: return 3
    case .mustCheckCount: return 4
    case .reviewCheckCount: return 5
    case .reviewCheckRate: return 6
    case .veryBadCount: return 7
    case .badCount: return 8
    case .normalCount: return 9
    case .excellentCount: return 10
    case .qualifiedRate: return 11
    case .totalCheckDuration: return 12
    case .avgCheckDuration: return 13
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Core_QualityWorkerReportSortParam: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Core_QualityWorkerReportSortParam] = [
    .checkCount,
    .finishedCount,
    .finishedRate,
    .combineCheckCount,
    .mustCheckCount,
    .reviewCheckCount,
    .reviewCheckRate,
    .veryBadCount,
    .badCount,
    .normalCount,
    .excellentCount,
    .qualifiedRate,
    .totalCheckDuration,
    .avgCheckDuration,
  ]
}

#endif  // swift(>=4.2)

/// 排序字段
public enum Api_Core_CheckedWorkerQualityViewListSortParam: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 对话时间排序
  case firstSendTime // = 0

  /// 用户消息量
  case clientMessageCount // = 1

  /// 客服消息量
  case workerMessageCount // = 2

  /// 质检时长
  case checkDuration // = 3

  /// 推送时间
  case createTime // = 4

  /// 质检时间
  case scoreTime // = 5

  /// 复审时间
  case reviewTime // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .firstSendTime
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .firstSendTime
    case 1: self = .clientMessageCount
    case 2: self = .workerMessageCount
    case 3: self = .checkDuration
    case 4: self = .createTime
    case 5: self = .scoreTime
    case 6: self = .reviewTime
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .firstSendTime: return 0
    case .clientMessageCount: return 1
    case .workerMessageCount: return 2
    case .checkDuration: return 3
    case .createTime: return 4
    case .scoreTime: return 5
    case .reviewTime: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Core_CheckedWorkerQualityViewListSortParam: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Core_CheckedWorkerQualityViewListSortParam] = [
    .firstSendTime,
    .clientMessageCount,
    .workerMessageCount,
    .checkDuration,
    .createTime,
    .scoreTime,
    .reviewTime,
  ]
}

#endif  // swift(>=4.2)

public struct Api_Core_ChatQualityAssurancePageReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var page: UInt32 = 0

  public var pageSize: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 质检设置
public struct Api_Core_ChatQualitySettingsResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户层级状态
  public var isCustomerLevelEnabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_SetChatQualitySettingsReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户层级状态
  public var isCustomerLevelEnabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 用户层级
public struct Api_Core_ChatQualityCustomerLevel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户层级ID
  public var id: UInt32 = 0

  /// 用户等级
  public var externLevel: UInt32 = 0

  /// 映射名
  public var customName: String {
    get {return _customName ?? String()}
    set {_customName = newValue}
  }
  /// Returns true if `customName` has been explicitly set.
  public var hasCustomName: Bool {return self._customName != nil}
  /// Clears the value of `customName`. Subsequent reads from it will return its default value.
  public mutating func clearCustomName() {self._customName = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _customName: String? = nil
}

public struct Api_Core_SetChatQualityCustomerLevelItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户层级ID
  public var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  /// 映射名
  public var customName: String {
    get {return _customName ?? String()}
    set {_customName = newValue}
  }
  /// Returns true if `customName` has been explicitly set.
  public var hasCustomName: Bool {return self._customName != nil}
  /// Clears the value of `customName`. Subsequent reads from it will return its default value.
  public mutating func clearCustomName() {self._customName = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: UInt32? = nil
  fileprivate var _customName: String? = nil
}

public struct Api_Core_SetChatQualityCustomerLevel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var setList: [Api_Core_SetChatQualityCustomerLevelItem] = []

  public var deleteIds: [UInt32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_ChatQualityCustomerLevelListResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var items: [Api_Core_ChatQualityCustomerLevel] = []

  public var total: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_ChatQACheckSettingThreshold {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var key: Api_Common_ThresholdType = .serveTimeThreshold

  public var value: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_ChatQACheckSettingReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 设置类型
  public var settingType: Api_Common_ChatQACheckSettingType = .normalCheck

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_ChatQACheckSettingResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 设置类型
  public var settingType: Api_Common_ChatQACheckSettingType = .normalCheck

  /// 触发条件
  public var thresholdSettings: [Api_Core_ChatQACheckSettingThreshold] = []

  /// 用户层及条件
  public var customerLevels: [Api_Core_ChatQACheckSettingRespCustomerLevel] = []

  /// 联检人数。只用于联检设置
  public var collabNum: UInt32 {
    get {return _collabNum ?? 0}
    set {_collabNum = newValue}
  }
  /// Returns true if `collabNum` has been explicitly set.
  public var hasCollabNum: Bool {return self._collabNum != nil}
  /// Clears the value of `collabNum`. Subsequent reads from it will return its default value.
  public mutating func clearCollabNum() {self._collabNum = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _collabNum: UInt32? = nil
}

public struct Api_Core_ChatQACheckSettingRespCustomerLevel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var customerLevels: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 必检/联检会话设置
public struct Api_Core_SetChatQACheckSettingReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 设置类型
  public var settingType: Api_Common_ChatQACheckSettingType = .normalCheck

  /// 触发条件
  public var thresholdSettings: [Api_Core_ChatQACheckSettingThreshold] = []

  /// 用户层及条件
  public var customerLevels: [Int32] = []

  /// 联检人数。只用于联检设置
  public var collabNum: UInt32 {
    get {return _collabNum ?? 0}
    set {_collabNum = newValue}
  }
  /// Returns true if `collabNum` has been explicitly set.
  public var hasCollabNum: Bool {return self._collabNum != nil}
  /// Clears the value of `collabNum`. Subsequent reads from it will return its default value.
  public mutating func clearCollabNum() {self._collabNum = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _collabNum: UInt32? = nil
}

/// 质检客服配置
public struct Api_Core_QAAssignedWorker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var workerID: Int32 = 0

  public var workerName: String = String()

  public var isAssigned: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_QAAssignedWorkerListResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var items: [Api_Core_QAAssignedWorker] = []

  public var total: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_SetQAAssignedWorkerReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var workerID: Int32 = 0

  public var isAssigned: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 质检客服报表列表请求参数
public struct Api_Core_QualityWorkerReportRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 开始时间(北京时间)
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// 结束时间(北京时间)
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  /// 质检客服ID
  public var checkWorkerID: Int32 = 0

  /// 分页参数
  public var page: Int32 = 0

  public var pageSize: Int32 = 0

  /// 排序字段
  public var sortParam: Api_Core_QualityWorkerReportSortParam = .checkCount

  /// 排序类型
  public var sortType: CommonSortType = .descend

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// 质检客服报表数据实体
public struct Api_Core_QualityWorkerReportEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 被质检客服账号
  public var workerID: Int32 {
    get {return _storage._workerID}
    set {_uniqueStorage()._workerID = newValue}
  }

  /// 被质检客服昵称
  public var workerName: String {
    get {return _storage._workerName}
    set {_uniqueStorage()._workerName = newValue}
  }

  ///总分配单量
  public var checkCount: Int32 {
    get {return _storage._checkCount}
    set {_uniqueStorage()._checkCount = newValue}
  }

  /// 总完成单量
  public var finishedCount: Int32 {
    get {return _storage._finishedCount}
    set {_uniqueStorage()._finishedCount = newValue}
  }

  /// 总完成率
  public var finishedRate: Int32 {
    get {return _storage._finishedRate}
    set {_uniqueStorage()._finishedRate = newValue}
  }

  /// 总联检数
  public var combineCheckCount: Int32 {
    get {return _storage._combineCheckCount}
    set {_uniqueStorage()._combineCheckCount = newValue}
  }

  /// 总联检比例
  public var combineCheckRate: Int32 {
    get {return _storage._combineCheckRate}
    set {_uniqueStorage()._combineCheckRate = newValue}
  }

  /// 必检数
  public var mustCheckCount: Int32 {
    get {return _storage._mustCheckCount}
    set {_uniqueStorage()._mustCheckCount = newValue}
  }

  ///  必检比例
  public var mustCheckRate: Int32 {
    get {return _storage._mustCheckRate}
    set {_uniqueStorage()._mustCheckRate = newValue}
  }

  ///总复审单量
  public var reviewCheckCount: Int32 {
    get {return _storage._reviewCheckCount}
    set {_uniqueStorage()._reviewCheckCount = newValue}
  }

  /// 总复审率
  public var reviewCheckRate: Int32 {
    get {return _storage._reviewCheckRate}
    set {_uniqueStorage()._reviewCheckRate = newValue}
  }

  /// 极差数
  public var veryBadCount: Int32 {
    get {return _storage._veryBadCount}
    set {_uniqueStorage()._veryBadCount = newValue}
  }

  /// 极差比例
  public var veryBadRate: Int32 {
    get {return _storage._veryBadRate}
    set {_uniqueStorage()._veryBadRate = newValue}
  }

  /// 较差数
  public var badCount: Int32 {
    get {return _storage._badCount}
    set {_uniqueStorage()._badCount = newValue}
  }

  /// 较差比例
  public var badRate: Int32 {
    get {return _storage._badRate}
    set {_uniqueStorage()._badRate = newValue}
  }

  /// 正常数
  public var normalCount: Int32 {
    get {return _storage._normalCount}
    set {_uniqueStorage()._normalCount = newValue}
  }

  ///正常比例
  public var normalRate: Int32 {
    get {return _storage._normalRate}
    set {_uniqueStorage()._normalRate = newValue}
  }

  ///优异数
  public var excellentCount: Int32 {
    get {return _storage._excellentCount}
    set {_uniqueStorage()._excellentCount = newValue}
  }

  /// 优异比例
  public var excellentRate: Int32 {
    get {return _storage._excellentRate}
    set {_uniqueStorage()._excellentRate = newValue}
  }

  /// 合格数
  public var qualifiedCount: Int32 {
    get {return _storage._qualifiedCount}
    set {_uniqueStorage()._qualifiedCount = newValue}
  }

  /// 合格率
  public var qualifiedRate: Int32 {
    get {return _storage._qualifiedRate}
    set {_uniqueStorage()._qualifiedRate = newValue}
  }

  /// 总质检时长
  public var totalCheckDuration: String {
    get {return _storage._totalCheckDuration}
    set {_uniqueStorage()._totalCheckDuration = newValue}
  }

  /// 平均质检时长
  public var avgCheckDuration: String {
    get {return _storage._avgCheckDuration}
    set {_uniqueStorage()._avgCheckDuration = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Api_Core_QualityWorkerReportStatistic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 质检客服数
  public var checkWorkerCount: Int32 {
    get {return _storage._checkWorkerCount}
    set {_uniqueStorage()._checkWorkerCount = newValue}
  }

  ///总分配单量
  public var checkCount: Int32 {
    get {return _storage._checkCount}
    set {_uniqueStorage()._checkCount = newValue}
  }

  /// 总完成单量
  public var finishedCount: Int32 {
    get {return _storage._finishedCount}
    set {_uniqueStorage()._finishedCount = newValue}
  }

  /// 总完成率
  public var finishedRate: Int32 {
    get {return _storage._finishedRate}
    set {_uniqueStorage()._finishedRate = newValue}
  }

  /// 总联检数
  public var combineCheckCount: Int32 {
    get {return _storage._combineCheckCount}
    set {_uniqueStorage()._combineCheckCount = newValue}
  }

  /// 总联检比例
  public var combineCheckRate: Int32 {
    get {return _storage._combineCheckRate}
    set {_uniqueStorage()._combineCheckRate = newValue}
  }

  /// 总必检数
  public var mustCheckCount: Int32 {
    get {return _storage._mustCheckCount}
    set {_uniqueStorage()._mustCheckCount = newValue}
  }

  /// 总必检比例
  public var mustCheckRate: Int32 {
    get {return _storage._mustCheckRate}
    set {_uniqueStorage()._mustCheckRate = newValue}
  }

  /// 总复审量
  public var reviewCheckCount: Int32 {
    get {return _storage._reviewCheckCount}
    set {_uniqueStorage()._reviewCheckCount = newValue}
  }

  /// 总复审比例
  public var reviewCheckRate: Int32 {
    get {return _storage._reviewCheckRate}
    set {_uniqueStorage()._reviewCheckRate = newValue}
  }

  /// 总质检时长
  public var totalCheckDuration: String {
    get {return _storage._totalCheckDuration}
    set {_uniqueStorage()._totalCheckDuration = newValue}
  }

  /// 平均质检时长
  public var avgCheckDuration: String {
    get {return _storage._avgCheckDuration}
    set {_uniqueStorage()._avgCheckDuration = newValue}
  }

  /// 极差数
  public var veryBadCount: Int32 {
    get {return _storage._veryBadCount}
    set {_uniqueStorage()._veryBadCount = newValue}
  }

  /// 极差比例
  public var veryBadRate: Int32 {
    get {return _storage._veryBadRate}
    set {_uniqueStorage()._veryBadRate = newValue}
  }

  /// 较差数
  public var badCount: Int32 {
    get {return _storage._badCount}
    set {_uniqueStorage()._badCount = newValue}
  }

  /// 较差比例
  public var badRate: Int32 {
    get {return _storage._badRate}
    set {_uniqueStorage()._badRate = newValue}
  }

  /// 合格数
  public var qualifiedCount: Int32 {
    get {return _storage._qualifiedCount}
    set {_uniqueStorage()._qualifiedCount = newValue}
  }

  /// 合格比例
  public var qualifiedRate: Int32 {
    get {return _storage._qualifiedRate}
    set {_uniqueStorage()._qualifiedRate = newValue}
  }

  /// 质检客服总数
  public var totalCheckWorkerCount: Int32 {
    get {return _storage._totalCheckWorkerCount}
    set {_uniqueStorage()._totalCheckWorkerCount = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 质检客服报表列表返回参数
public struct Api_Core_QualityWorkerReportResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 统计
  public var statistic: Api_Core_QualityWorkerReportStatistic {
    get {return _statistic ?? Api_Core_QualityWorkerReportStatistic()}
    set {_statistic = newValue}
  }
  /// Returns true if `statistic` has been explicitly set.
  public var hasStatistic: Bool {return self._statistic != nil}
  /// Clears the value of `statistic`. Subsequent reads from it will return its default value.
  public mutating func clearStatistic() {self._statistic = nil}

  /// 列表
  public var list: [Api_Core_QualityWorkerReportEntity] = []

  /// 总条数
  public var total: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _statistic: Api_Core_QualityWorkerReportStatistic? = nil
}

/// 质检客服报表质检人实体
public struct Api_Core_QualityCheckWorkerNameAndIdMapEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 质检人ID
  public var checkWorkerID: Int32 = 0

  /// 质检人名称
  public var checkWorkerName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 质检客服报表质检人列表
public struct Api_Core_QualityCheckWorkerNameAndIdMapListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var list: [Api_Core_QualityCheckWorkerNameAndIdMapEntity] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 客服名称和Id 实体
public struct Api_Core_WorkersMapUseBySearchEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 客服ID
  public var workerID: Int32 = 0

  /// 客服名称
  public var workerName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///  客服名称和Id实体数组
public struct Api_Core_WorkersMapUseBySearchEntityList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 客服客服名称和Id 实体
  public var list: [Api_Core_WorkersMapUseBySearchEntity] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///    客服组名称和Id 实体
public struct Api_Core_WorkerGroupNameIdEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 客服组ID
  public var workGroupID: Int32 = 0

  /// 客服组名称
  public var workerGroupName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 查询企业客服组和客服信息 查询的时候使用返回结果
public struct Api_Core_WorkerGroupAndWorkersListUseBySearchResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 客服组 名称ID数组
  public var list: [Api_Core_WorkerGroupNameIdEntity] = []

  /// key ： 客服组ID , value： 客服名称和ID 数组
  public var workerList: Dictionary<Int32,Api_Core_WorkersMapUseBySearchEntityList> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 已质检查看列表请求参数
public struct Api_Core_CheckedWorkerQualityViewListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 开始时间(北京时间)
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  /// 结束时间(北京时间)
  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {_uniqueStorage()._endTime = nil}

  /// 客服组ID
  public var checkWorkerGroupID: Int32 {
    get {return _storage._checkWorkerGroupID}
    set {_uniqueStorage()._checkWorkerGroupID = newValue}
  }

  /// 客服ID
  public var workerID: Int32 {
    get {return _storage._workerID}
    set {_uniqueStorage()._workerID = newValue}
  }

  /// 质检客服账号
  public var checkWorkerAccount: String {
    get {return _storage._checkWorkerAccount}
    set {_uniqueStorage()._checkWorkerAccount = newValue}
  }

  /// 用户等级
  public var userLevel: Int32 {
    get {return _storage._userLevel}
    set {_uniqueStorage()._userLevel = newValue}
  }

  /// 用户ID / username
  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  /// 服务时长
  public var serviceDuration: Int32 {
    get {return _storage._serviceDuration}
    set {_uniqueStorage()._serviceDuration = newValue}
  }

  /// 质检类型
  public var checkType: Api_Common_WorkerCheckType {
    get {return _storage._checkType ?? .wqtCommon}
    set {_uniqueStorage()._checkType = newValue}
  }
  /// Returns true if `checkType` has been explicitly set.
  public var hasCheckType: Bool {return _storage._checkType != nil}
  /// Clears the value of `checkType`. Subsequent reads from it will return its default value.
  public mutating func clearCheckType() {_uniqueStorage()._checkType = nil}

  /// 质检人ID
  public var checkWorkerID: Int32 {
    get {return _storage._checkWorkerID}
    set {_uniqueStorage()._checkWorkerID = newValue}
  }

  ///质检时长
  public var checkDuration: Int32 {
    get {return _storage._checkDuration}
    set {_uniqueStorage()._checkDuration = newValue}
  }

  /// 质检结果评级
  public var checkScore: Api_Common_WorkerScoreType {
    get {return _storage._checkScore ?? .wstUnknown}
    set {_uniqueStorage()._checkScore = newValue}
  }
  /// Returns true if `checkScore` has been explicitly set.
  public var hasCheckScore: Bool {return _storage._checkScore != nil}
  /// Clears the value of `checkScore`. Subsequent reads from it will return its default value.
  public mutating func clearCheckScore() {_uniqueStorage()._checkScore = nil}

  /// 是否复审
  public var isReview: Bool {
    get {return _storage._isReview ?? false}
    set {_uniqueStorage()._isReview = newValue}
  }
  /// Returns true if `isReview` has been explicitly set.
  public var hasIsReview: Bool {return _storage._isReview != nil}
  /// Clears the value of `isReview`. Subsequent reads from it will return its default value.
  public mutating func clearIsReview() {_uniqueStorage()._isReview = nil}

  /// 分页参数
  public var page: Int32 {
    get {return _storage._page}
    set {_uniqueStorage()._page = newValue}
  }

  public var pageSize: Int32 {
    get {return _storage._pageSize}
    set {_uniqueStorage()._pageSize = newValue}
  }

  /// 排序参数
  public var sortParam: Api_Core_CheckedWorkerQualityViewListSortParam {
    get {return _storage._sortParam}
    set {_uniqueStorage()._sortParam = newValue}
  }

  public var sortType: CommonSortType {
    get {return _storage._sortType}
    set {_uniqueStorage()._sortType = newValue}
  }

  /// 服务客服账号
  public var workerAccount: String {
    get {return _storage._workerAccount}
    set {_uniqueStorage()._workerAccount = newValue}
  }

  /// 访问来源
  public var source: Api_Common_CheckViewSource {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 已质检查看列表实体
public struct Api_Core_CheckedWorkerQualityViewEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户ID
  public var userID: Int32 {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  /// 用户名称
  public var userNickname: String {
    get {return _storage._userNickname}
    set {_uniqueStorage()._userNickname = newValue}
  }

  /// 用户IP
  public var userIp: String {
    get {return _storage._userIp}
    set {_uniqueStorage()._userIp = newValue}
  }

  /// 用户地理位置
  public var userLocation: String {
    get {return _storage._userLocation}
    set {_uniqueStorage()._userLocation = newValue}
  }

  /// 用户平台
  public var os: String {
    get {return _storage._os}
    set {_uniqueStorage()._os = newValue}
  }

  /// 用户等级
  public var userLevel: String {
    get {return _storage._userLevel}
    set {_uniqueStorage()._userLevel = newValue}
  }

  /// 会话时间
  public var firstSendTime: Int64 {
    get {return _storage._firstSendTime}
    set {_uniqueStorage()._firstSendTime = newValue}
  }

  public var lastSendTime: Int64 {
    get {return _storage._lastSendTime}
    set {_uniqueStorage()._lastSendTime = newValue}
  }

  /// 会话时长
  public var serviceDuration: String {
    get {return _storage._serviceDuration}
    set {_uniqueStorage()._serviceDuration = newValue}
  }

  /// 客服ID
  public var workerID: Int32 {
    get {return _storage._workerID}
    set {_uniqueStorage()._workerID = newValue}
  }

  /// 客服名称
  public var workerName: String {
    get {return _storage._workerName}
    set {_uniqueStorage()._workerName = newValue}
  }

  /// 客户发送消息条数
  public var clientMessageCount: Int32 {
    get {return _storage._clientMessageCount}
    set {_uniqueStorage()._clientMessageCount = newValue}
  }

  /// 客服发送消息条数
  public var workerMessageCount: Int32 {
    get {return _storage._workerMessageCount}
    set {_uniqueStorage()._workerMessageCount = newValue}
  }

  /// 质检时长
  public var checkDuration: String {
    get {return _storage._checkDuration}
    set {_uniqueStorage()._checkDuration = newValue}
  }

  /// 质检评价类型
  public var checkScore: Api_Common_WorkerScoreType {
    get {return _storage._checkScore}
    set {_uniqueStorage()._checkScore = newValue}
  }

  /// 复审评价类型
  public var reviewCheckScore: Api_Common_WorkerScoreType {
    get {return _storage._reviewCheckScore}
    set {_uniqueStorage()._reviewCheckScore = newValue}
  }

  /// 问题类型
  public var questionType: [String] {
    get {return _storage._questionType}
    set {_uniqueStorage()._questionType = newValue}
  }

  /// 评价
  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// 复审评价
  public var reviewContent: String {
    get {return _storage._reviewContent}
    set {_uniqueStorage()._reviewContent = newValue}
  }

  /// 发送时间
  public var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  /// 复审时间
  public var reviewTime: Int64 {
    get {return _storage._reviewTime}
    set {_uniqueStorage()._reviewTime = newValue}
  }

  /// 质检客服名称
  public var scoreWorkerName: String {
    get {return _storage._scoreWorkerName}
    set {_uniqueStorage()._scoreWorkerName = newValue}
  }

  /// 质检客服ID
  public var scoreWorkerID: Int32 {
    get {return _storage._scoreWorkerID}
    set {_uniqueStorage()._scoreWorkerID = newValue}
  }

  /// 复审质检客服名称
  public var reviewWorkerName: String {
    get {return _storage._reviewWorkerName}
    set {_uniqueStorage()._reviewWorkerName = newValue}
  }

  /// 复审质检客服ID
  public var reviewWorkerID: Int32 {
    get {return _storage._reviewWorkerID}
    set {_uniqueStorage()._reviewWorkerID = newValue}
  }

  /// 质检类型
  public var checkType: Api_Common_WorkerCheckType {
    get {return _storage._checkType}
    set {_uniqueStorage()._checkType = newValue}
  }

  /// 质检时间
  public var scoreTime: Int64 {
    get {return _storage._scoreTime}
    set {_uniqueStorage()._scoreTime = newValue}
  }

  /// 会话ID
  public var chatID: Int64 {
    get {return _storage._chatID}
    set {_uniqueStorage()._chatID = newValue}
  }

  public var bindingSessionID: Int64 {
    get {return _storage._bindingSessionID}
    set {_uniqueStorage()._bindingSessionID = newValue}
  }

  /// 逐渐ID
  public var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 质检记录
  public var checkLog: [Api_Core_QualitySessionReadLog] {
    get {return _storage._checkLog}
    set {_uniqueStorage()._checkLog = newValue}
  }

  /// 同组质检结果
  public var workerQualitySessions: [SwiftProtobuf.Google_Protobuf_Any] {
    get {return _storage._workerQualitySessions}
    set {_uniqueStorage()._workerQualitySessions = newValue}
  }

  /// 订单号
  public var rechargeOrderNo: String {
    get {return _storage._rechargeOrderNo}
    set {_uniqueStorage()._rechargeOrderNo = newValue}
  }

  /// 订单时间
  public var rechargeOrderTime: String {
    get {return _storage._rechargeOrderTime}
    set {_uniqueStorage()._rechargeOrderTime = newValue}
  }

  /// 注册来源
  public var userRegisterSource: String {
    get {return _storage._userRegisterSource}
    set {_uniqueStorage()._userRegisterSource = newValue}
  }

  /// 最后推送消息时间
  public var lastPushTime: UInt32 {
    get {return _storage._lastPushTime}
    set {_uniqueStorage()._lastPushTime = newValue}
  }

  /// 会话分配时间
  public var assignTime: UInt32 {
    get {return _storage._assignTime}
    set {_uniqueStorage()._assignTime = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Api_Core_CheckerWorkerQualityViewStatistic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 客服数量
  public var workerCount: Int32 = 0

  /// 质检会话数
  public var checkChatCount: Int32 = 0

  /// 质检时长
  public var checkDuration: Int64 = 0

  /// 必检
  public var mustCheckCount: Int32 = 0

  /// 联检
  public var combineCheckCount: Int32 = 0

  /// 复检数
  public var reviewCheckCount: Int32 = 0

  /// 优异的
  public var excellentCount: Int32 = 0

  /// 正常的
  public var normalCount: Int32 = 0

  /// 极差的
  public var veryBadCount: Int32 = 0

  /// 较差的
  public var badCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 已质检查看列表返回参数
public struct Api_Core_CheckedWorkerQualityViewListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 列表的
  public var list: [Api_Core_CheckedWorkerQualityViewEntity] = []

  /// 统计的
  public var statistic: Api_Core_CheckerWorkerQualityViewStatistic {
    get {return _statistic ?? Api_Core_CheckerWorkerQualityViewStatistic()}
    set {_statistic = newValue}
  }
  /// Returns true if `statistic` has been explicitly set.
  public var hasStatistic: Bool {return self._statistic != nil}
  /// Clears the value of `statistic`. Subsequent reads from it will return its default value.
  public mutating func clearStatistic() {self._statistic = nil}

  /// 总条数
  public var count: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _statistic: Api_Core_CheckerWorkerQualityViewStatistic? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Core_QualityWorkerReportSortParam: @unchecked Sendable {}
extension Api_Core_CheckedWorkerQualityViewListSortParam: @unchecked Sendable {}
extension Api_Core_ChatQualityAssurancePageReq: @unchecked Sendable {}
extension Api_Core_ChatQualitySettingsResp: @unchecked Sendable {}
extension Api_Core_SetChatQualitySettingsReq: @unchecked Sendable {}
extension Api_Core_ChatQualityCustomerLevel: @unchecked Sendable {}
extension Api_Core_SetChatQualityCustomerLevelItem: @unchecked Sendable {}
extension Api_Core_SetChatQualityCustomerLevel: @unchecked Sendable {}
extension Api_Core_ChatQualityCustomerLevelListResp: @unchecked Sendable {}
extension Api_Core_ChatQACheckSettingThreshold: @unchecked Sendable {}
extension Api_Core_ChatQACheckSettingReq: @unchecked Sendable {}
extension Api_Core_ChatQACheckSettingResp: @unchecked Sendable {}
extension Api_Core_ChatQACheckSettingRespCustomerLevel: @unchecked Sendable {}
extension Api_Core_SetChatQACheckSettingReq: @unchecked Sendable {}
extension Api_Core_QAAssignedWorker: @unchecked Sendable {}
extension Api_Core_QAAssignedWorkerListResp: @unchecked Sendable {}
extension Api_Core_SetQAAssignedWorkerReq: @unchecked Sendable {}
extension Api_Core_QualityWorkerReportRequest: @unchecked Sendable {}
extension Api_Core_QualityWorkerReportEntity: @unchecked Sendable {}
extension Api_Core_QualityWorkerReportStatistic: @unchecked Sendable {}
extension Api_Core_QualityWorkerReportResponse: @unchecked Sendable {}
extension Api_Core_QualityCheckWorkerNameAndIdMapEntity: @unchecked Sendable {}
extension Api_Core_QualityCheckWorkerNameAndIdMapListResponse: @unchecked Sendable {}
extension Api_Core_WorkersMapUseBySearchEntity: @unchecked Sendable {}
extension Api_Core_WorkersMapUseBySearchEntityList: @unchecked Sendable {}
extension Api_Core_WorkerGroupNameIdEntity: @unchecked Sendable {}
extension Api_Core_WorkerGroupAndWorkersListUseBySearchResponse: @unchecked Sendable {}
extension Api_Core_CheckedWorkerQualityViewListRequest: @unchecked Sendable {}
extension Api_Core_CheckedWorkerQualityViewEntity: @unchecked Sendable {}
extension Api_Core_CheckerWorkerQualityViewStatistic: @unchecked Sendable {}
extension Api_Core_CheckedWorkerQualityViewListResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.core"

extension Api_Core_QualityWorkerReportSortParam: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHECK_COUNT"),
    1: .same(proto: "FINISHED_COUNT"),
    2: .same(proto: "FINISHED_RATE"),
    3: .same(proto: "COMBINE_CHECK_COUNT"),
    4: .same(proto: "MUST_CHECK_COUNT"),
    5: .same(proto: "REVIEW_CHECK_COUNT"),
    6: .same(proto: "REVIEW_CHECK_RATE"),
    7: .same(proto: "VERY_BAD_COUNT"),
    8: .same(proto: "BAD_COUNT"),
    9: .same(proto: "NORMAL_COUNT"),
    10: .same(proto: "EXCELLENT_COUNT"),
    11: .same(proto: "QUALIFIED_RATE"),
    12: .same(proto: "TOTAL_CHECK_DURATION"),
    13: .same(proto: "AVG_CHECK_DURATION"),
  ]
}

extension Api_Core_CheckedWorkerQualityViewListSortParam: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FIRST_SEND_TIME"),
    1: .same(proto: "CLIENT_MESSAGE_COUNT"),
    2: .same(proto: "WORKER_MESSAGE_COUNT"),
    3: .same(proto: "CHECK_DURATION"),
    4: .same(proto: "CREATE_TIME"),
    5: .same(proto: "SCORE_TIME"),
    6: .same(proto: "REVIEW_TIME"),
  ]
}

extension Api_Core_ChatQualityAssurancePageReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatQualityAssurancePageReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "page"),
    2: .standard(proto: "page_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.page) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 1)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageSize, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ChatQualityAssurancePageReq, rhs: Api_Core_ChatQualityAssurancePageReq) -> Bool {
    if lhs.page != rhs.page {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_ChatQualitySettingsResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatQualitySettingsResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_customer_level_enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isCustomerLevelEnabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isCustomerLevelEnabled != false {
      try visitor.visitSingularBoolField(value: self.isCustomerLevelEnabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ChatQualitySettingsResp, rhs: Api_Core_ChatQualitySettingsResp) -> Bool {
    if lhs.isCustomerLevelEnabled != rhs.isCustomerLevelEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_SetChatQualitySettingsReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetChatQualitySettingsReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_customer_level_enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isCustomerLevelEnabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isCustomerLevelEnabled != false {
      try visitor.visitSingularBoolField(value: self.isCustomerLevelEnabled, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_SetChatQualitySettingsReq, rhs: Api_Core_SetChatQualitySettingsReq) -> Bool {
    if lhs.isCustomerLevelEnabled != rhs.isCustomerLevelEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_ChatQualityCustomerLevel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatQualityCustomerLevel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "extern_level"),
    3: .standard(proto: "custom_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.externLevel) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._customName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.externLevel != 0 {
      try visitor.visitSingularUInt32Field(value: self.externLevel, fieldNumber: 2)
    }
    try { if let v = self._customName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ChatQualityCustomerLevel, rhs: Api_Core_ChatQualityCustomerLevel) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.externLevel != rhs.externLevel {return false}
    if lhs._customName != rhs._customName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_SetChatQualityCustomerLevelItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetChatQualityCustomerLevelItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "custom_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._customName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._customName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_SetChatQualityCustomerLevelItem, rhs: Api_Core_SetChatQualityCustomerLevelItem) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._customName != rhs._customName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_SetChatQualityCustomerLevel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetChatQualityCustomerLevel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "set_list"),
    2: .standard(proto: "delete_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.setList) }()
      case 2: try { try decoder.decodeRepeatedUInt32Field(value: &self.deleteIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.setList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.setList, fieldNumber: 1)
    }
    if !self.deleteIds.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.deleteIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_SetChatQualityCustomerLevel, rhs: Api_Core_SetChatQualityCustomerLevel) -> Bool {
    if lhs.setList != rhs.setList {return false}
    if lhs.deleteIds != rhs.deleteIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_ChatQualityCustomerLevelListResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatQualityCustomerLevelListResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .same(proto: "total"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.total) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularUInt64Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ChatQualityCustomerLevelListResp, rhs: Api_Core_ChatQualityCustomerLevelListResp) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_ChatQACheckSettingThreshold: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatQACheckSettingThreshold"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.key != .serveTimeThreshold {
      try visitor.visitSingularEnumField(value: self.key, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ChatQACheckSettingThreshold, rhs: Api_Core_ChatQACheckSettingThreshold) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_ChatQACheckSettingReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatQACheckSettingReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "setting_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.settingType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.settingType != .normalCheck {
      try visitor.visitSingularEnumField(value: self.settingType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ChatQACheckSettingReq, rhs: Api_Core_ChatQACheckSettingReq) -> Bool {
    if lhs.settingType != rhs.settingType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_ChatQACheckSettingResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatQACheckSettingResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "setting_type"),
    2: .standard(proto: "threshold_settings"),
    3: .standard(proto: "customer_levels"),
    4: .standard(proto: "collab_num"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.settingType) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.thresholdSettings) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.customerLevels) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._collabNum) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.settingType != .normalCheck {
      try visitor.visitSingularEnumField(value: self.settingType, fieldNumber: 1)
    }
    if !self.thresholdSettings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.thresholdSettings, fieldNumber: 2)
    }
    if !self.customerLevels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customerLevels, fieldNumber: 3)
    }
    try { if let v = self._collabNum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ChatQACheckSettingResp, rhs: Api_Core_ChatQACheckSettingResp) -> Bool {
    if lhs.settingType != rhs.settingType {return false}
    if lhs.thresholdSettings != rhs.thresholdSettings {return false}
    if lhs.customerLevels != rhs.customerLevels {return false}
    if lhs._collabNum != rhs._collabNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_ChatQACheckSettingRespCustomerLevel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatQACheckSettingRespCustomerLevel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "customer_levels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.customerLevels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.customerLevels != 0 {
      try visitor.visitSingularInt32Field(value: self.customerLevels, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ChatQACheckSettingRespCustomerLevel, rhs: Api_Core_ChatQACheckSettingRespCustomerLevel) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.customerLevels != rhs.customerLevels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_SetChatQACheckSettingReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetChatQACheckSettingReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "setting_type"),
    2: .standard(proto: "threshold_settings"),
    3: .standard(proto: "customer_levels"),
    4: .standard(proto: "collab_num"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.settingType) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.thresholdSettings) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.customerLevels) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._collabNum) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.settingType != .normalCheck {
      try visitor.visitSingularEnumField(value: self.settingType, fieldNumber: 1)
    }
    if !self.thresholdSettings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.thresholdSettings, fieldNumber: 2)
    }
    if !self.customerLevels.isEmpty {
      try visitor.visitPackedInt32Field(value: self.customerLevels, fieldNumber: 3)
    }
    try { if let v = self._collabNum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_SetChatQACheckSettingReq, rhs: Api_Core_SetChatQACheckSettingReq) -> Bool {
    if lhs.settingType != rhs.settingType {return false}
    if lhs.thresholdSettings != rhs.thresholdSettings {return false}
    if lhs.customerLevels != rhs.customerLevels {return false}
    if lhs._collabNum != rhs._collabNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_QAAssignedWorker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QAAssignedWorker"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "worker_id"),
    2: .standard(proto: "worker_name"),
    3: .standard(proto: "is_assigned"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.workerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.workerName) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isAssigned) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.workerID != 0 {
      try visitor.visitSingularInt32Field(value: self.workerID, fieldNumber: 1)
    }
    if !self.workerName.isEmpty {
      try visitor.visitSingularStringField(value: self.workerName, fieldNumber: 2)
    }
    if self.isAssigned != false {
      try visitor.visitSingularBoolField(value: self.isAssigned, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_QAAssignedWorker, rhs: Api_Core_QAAssignedWorker) -> Bool {
    if lhs.workerID != rhs.workerID {return false}
    if lhs.workerName != rhs.workerName {return false}
    if lhs.isAssigned != rhs.isAssigned {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_QAAssignedWorkerListResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QAAssignedWorkerListResp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .same(proto: "total"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.total) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularUInt64Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_QAAssignedWorkerListResp, rhs: Api_Core_QAAssignedWorkerListResp) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_SetQAAssignedWorkerReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetQAAssignedWorkerReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "worker_id"),
    2: .standard(proto: "is_assigned"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.workerID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isAssigned) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.workerID != 0 {
      try visitor.visitSingularInt32Field(value: self.workerID, fieldNumber: 1)
    }
    if self.isAssigned != false {
      try visitor.visitSingularBoolField(value: self.isAssigned, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_SetQAAssignedWorkerReq, rhs: Api_Core_SetQAAssignedWorkerReq) -> Bool {
    if lhs.workerID != rhs.workerID {return false}
    if lhs.isAssigned != rhs.isAssigned {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_QualityWorkerReportRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QualityWorkerReportRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
    3: .standard(proto: "check_worker_id"),
    4: .same(proto: "page"),
    5: .same(proto: "pageSize"),
    6: .standard(proto: "sort_param"),
    7: .standard(proto: "sort_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.checkWorkerID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.sortParam) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.sortType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.checkWorkerID != 0 {
      try visitor.visitSingularInt32Field(value: self.checkWorkerID, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 5)
    }
    if self.sortParam != .checkCount {
      try visitor.visitSingularEnumField(value: self.sortParam, fieldNumber: 6)
    }
    if self.sortType != .descend {
      try visitor.visitSingularEnumField(value: self.sortType, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_QualityWorkerReportRequest, rhs: Api_Core_QualityWorkerReportRequest) -> Bool {
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.checkWorkerID != rhs.checkWorkerID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.sortParam != rhs.sortParam {return false}
    if lhs.sortType != rhs.sortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_QualityWorkerReportEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QualityWorkerReportEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "worker_id"),
    2: .standard(proto: "worker_name"),
    3: .standard(proto: "check_count"),
    4: .standard(proto: "finished_count"),
    5: .standard(proto: "finished_rate"),
    6: .standard(proto: "combine_check_count"),
    7: .standard(proto: "combine_check_rate"),
    8: .standard(proto: "must_check_count"),
    9: .standard(proto: "must_check_rate"),
    10: .standard(proto: "review_check_count"),
    11: .standard(proto: "review_check_rate"),
    12: .standard(proto: "very_bad_count"),
    13: .standard(proto: "very_bad_rate"),
    14: .standard(proto: "bad_count"),
    15: .standard(proto: "bad_rate"),
    16: .standard(proto: "normal_count"),
    17: .standard(proto: "normal_rate"),
    18: .standard(proto: "excellent_count"),
    19: .standard(proto: "excellent_rate"),
    20: .standard(proto: "qualified_count"),
    21: .standard(proto: "qualified_rate"),
    22: .standard(proto: "total_check_duration"),
    23: .standard(proto: "Avg_check_duration"),
  ]

  fileprivate class _StorageClass {
    var _workerID: Int32 = 0
    var _workerName: String = String()
    var _checkCount: Int32 = 0
    var _finishedCount: Int32 = 0
    var _finishedRate: Int32 = 0
    var _combineCheckCount: Int32 = 0
    var _combineCheckRate: Int32 = 0
    var _mustCheckCount: Int32 = 0
    var _mustCheckRate: Int32 = 0
    var _reviewCheckCount: Int32 = 0
    var _reviewCheckRate: Int32 = 0
    var _veryBadCount: Int32 = 0
    var _veryBadRate: Int32 = 0
    var _badCount: Int32 = 0
    var _badRate: Int32 = 0
    var _normalCount: Int32 = 0
    var _normalRate: Int32 = 0
    var _excellentCount: Int32 = 0
    var _excellentRate: Int32 = 0
    var _qualifiedCount: Int32 = 0
    var _qualifiedRate: Int32 = 0
    var _totalCheckDuration: String = String()
    var _avgCheckDuration: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _workerID = source._workerID
      _workerName = source._workerName
      _checkCount = source._checkCount
      _finishedCount = source._finishedCount
      _finishedRate = source._finishedRate
      _combineCheckCount = source._combineCheckCount
      _combineCheckRate = source._combineCheckRate
      _mustCheckCount = source._mustCheckCount
      _mustCheckRate = source._mustCheckRate
      _reviewCheckCount = source._reviewCheckCount
      _reviewCheckRate = source._reviewCheckRate
      _veryBadCount = source._veryBadCount
      _veryBadRate = source._veryBadRate
      _badCount = source._badCount
      _badRate = source._badRate
      _normalCount = source._normalCount
      _normalRate = source._normalRate
      _excellentCount = source._excellentCount
      _excellentRate = source._excellentRate
      _qualifiedCount = source._qualifiedCount
      _qualifiedRate = source._qualifiedRate
      _totalCheckDuration = source._totalCheckDuration
      _avgCheckDuration = source._avgCheckDuration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._workerID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._workerName) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._checkCount) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._finishedCount) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._finishedRate) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._combineCheckCount) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._combineCheckRate) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._mustCheckCount) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._mustCheckRate) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._reviewCheckCount) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._reviewCheckRate) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._veryBadCount) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._veryBadRate) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._badCount) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._badRate) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._normalCount) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._normalRate) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._excellentCount) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._excellentRate) }()
        case 20: try { try decoder.decodeSingularInt32Field(value: &_storage._qualifiedCount) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._qualifiedRate) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._totalCheckDuration) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._avgCheckDuration) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._workerID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._workerID, fieldNumber: 1)
      }
      if !_storage._workerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._workerName, fieldNumber: 2)
      }
      if _storage._checkCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._checkCount, fieldNumber: 3)
      }
      if _storage._finishedCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._finishedCount, fieldNumber: 4)
      }
      if _storage._finishedRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._finishedRate, fieldNumber: 5)
      }
      if _storage._combineCheckCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._combineCheckCount, fieldNumber: 6)
      }
      if _storage._combineCheckRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._combineCheckRate, fieldNumber: 7)
      }
      if _storage._mustCheckCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mustCheckCount, fieldNumber: 8)
      }
      if _storage._mustCheckRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mustCheckRate, fieldNumber: 9)
      }
      if _storage._reviewCheckCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reviewCheckCount, fieldNumber: 10)
      }
      if _storage._reviewCheckRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reviewCheckRate, fieldNumber: 11)
      }
      if _storage._veryBadCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._veryBadCount, fieldNumber: 12)
      }
      if _storage._veryBadRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._veryBadRate, fieldNumber: 13)
      }
      if _storage._badCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._badCount, fieldNumber: 14)
      }
      if _storage._badRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._badRate, fieldNumber: 15)
      }
      if _storage._normalCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._normalCount, fieldNumber: 16)
      }
      if _storage._normalRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._normalRate, fieldNumber: 17)
      }
      if _storage._excellentCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._excellentCount, fieldNumber: 18)
      }
      if _storage._excellentRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._excellentRate, fieldNumber: 19)
      }
      if _storage._qualifiedCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._qualifiedCount, fieldNumber: 20)
      }
      if _storage._qualifiedRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._qualifiedRate, fieldNumber: 21)
      }
      if !_storage._totalCheckDuration.isEmpty {
        try visitor.visitSingularStringField(value: _storage._totalCheckDuration, fieldNumber: 22)
      }
      if !_storage._avgCheckDuration.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avgCheckDuration, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_QualityWorkerReportEntity, rhs: Api_Core_QualityWorkerReportEntity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._workerID != rhs_storage._workerID {return false}
        if _storage._workerName != rhs_storage._workerName {return false}
        if _storage._checkCount != rhs_storage._checkCount {return false}
        if _storage._finishedCount != rhs_storage._finishedCount {return false}
        if _storage._finishedRate != rhs_storage._finishedRate {return false}
        if _storage._combineCheckCount != rhs_storage._combineCheckCount {return false}
        if _storage._combineCheckRate != rhs_storage._combineCheckRate {return false}
        if _storage._mustCheckCount != rhs_storage._mustCheckCount {return false}
        if _storage._mustCheckRate != rhs_storage._mustCheckRate {return false}
        if _storage._reviewCheckCount != rhs_storage._reviewCheckCount {return false}
        if _storage._reviewCheckRate != rhs_storage._reviewCheckRate {return false}
        if _storage._veryBadCount != rhs_storage._veryBadCount {return false}
        if _storage._veryBadRate != rhs_storage._veryBadRate {return false}
        if _storage._badCount != rhs_storage._badCount {return false}
        if _storage._badRate != rhs_storage._badRate {return false}
        if _storage._normalCount != rhs_storage._normalCount {return false}
        if _storage._normalRate != rhs_storage._normalRate {return false}
        if _storage._excellentCount != rhs_storage._excellentCount {return false}
        if _storage._excellentRate != rhs_storage._excellentRate {return false}
        if _storage._qualifiedCount != rhs_storage._qualifiedCount {return false}
        if _storage._qualifiedRate != rhs_storage._qualifiedRate {return false}
        if _storage._totalCheckDuration != rhs_storage._totalCheckDuration {return false}
        if _storage._avgCheckDuration != rhs_storage._avgCheckDuration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_QualityWorkerReportStatistic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QualityWorkerReportStatistic"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "check_worker_count"),
    2: .standard(proto: "check_count"),
    3: .standard(proto: "finished_count"),
    4: .standard(proto: "finished_rate"),
    5: .standard(proto: "combine_check_count"),
    6: .standard(proto: "combine_check_rate"),
    7: .standard(proto: "must_check_count"),
    8: .standard(proto: "must_check_rate"),
    9: .standard(proto: "review_check_count"),
    10: .standard(proto: "review_check_rate"),
    11: .standard(proto: "total_check_duration"),
    12: .standard(proto: "avg_check_duration"),
    13: .standard(proto: "very_bad_count"),
    14: .standard(proto: "very_bad_rate"),
    15: .standard(proto: "bad_count"),
    16: .standard(proto: "bad_rate"),
    17: .standard(proto: "qualified_count"),
    18: .standard(proto: "qualified_rate"),
    19: .standard(proto: "total_check_worker_count"),
  ]

  fileprivate class _StorageClass {
    var _checkWorkerCount: Int32 = 0
    var _checkCount: Int32 = 0
    var _finishedCount: Int32 = 0
    var _finishedRate: Int32 = 0
    var _combineCheckCount: Int32 = 0
    var _combineCheckRate: Int32 = 0
    var _mustCheckCount: Int32 = 0
    var _mustCheckRate: Int32 = 0
    var _reviewCheckCount: Int32 = 0
    var _reviewCheckRate: Int32 = 0
    var _totalCheckDuration: String = String()
    var _avgCheckDuration: String = String()
    var _veryBadCount: Int32 = 0
    var _veryBadRate: Int32 = 0
    var _badCount: Int32 = 0
    var _badRate: Int32 = 0
    var _qualifiedCount: Int32 = 0
    var _qualifiedRate: Int32 = 0
    var _totalCheckWorkerCount: Int32 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _checkWorkerCount = source._checkWorkerCount
      _checkCount = source._checkCount
      _finishedCount = source._finishedCount
      _finishedRate = source._finishedRate
      _combineCheckCount = source._combineCheckCount
      _combineCheckRate = source._combineCheckRate
      _mustCheckCount = source._mustCheckCount
      _mustCheckRate = source._mustCheckRate
      _reviewCheckCount = source._reviewCheckCount
      _reviewCheckRate = source._reviewCheckRate
      _totalCheckDuration = source._totalCheckDuration
      _avgCheckDuration = source._avgCheckDuration
      _veryBadCount = source._veryBadCount
      _veryBadRate = source._veryBadRate
      _badCount = source._badCount
      _badRate = source._badRate
      _qualifiedCount = source._qualifiedCount
      _qualifiedRate = source._qualifiedRate
      _totalCheckWorkerCount = source._totalCheckWorkerCount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._checkWorkerCount) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._checkCount) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._finishedCount) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._finishedRate) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._combineCheckCount) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._combineCheckRate) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._mustCheckCount) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._mustCheckRate) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._reviewCheckCount) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._reviewCheckRate) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._totalCheckDuration) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._avgCheckDuration) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._veryBadCount) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._veryBadRate) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._badCount) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._badRate) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._qualifiedCount) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._qualifiedRate) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._totalCheckWorkerCount) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._checkWorkerCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._checkWorkerCount, fieldNumber: 1)
      }
      if _storage._checkCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._checkCount, fieldNumber: 2)
      }
      if _storage._finishedCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._finishedCount, fieldNumber: 3)
      }
      if _storage._finishedRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._finishedRate, fieldNumber: 4)
      }
      if _storage._combineCheckCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._combineCheckCount, fieldNumber: 5)
      }
      if _storage._combineCheckRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._combineCheckRate, fieldNumber: 6)
      }
      if _storage._mustCheckCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mustCheckCount, fieldNumber: 7)
      }
      if _storage._mustCheckRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mustCheckRate, fieldNumber: 8)
      }
      if _storage._reviewCheckCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reviewCheckCount, fieldNumber: 9)
      }
      if _storage._reviewCheckRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reviewCheckRate, fieldNumber: 10)
      }
      if !_storage._totalCheckDuration.isEmpty {
        try visitor.visitSingularStringField(value: _storage._totalCheckDuration, fieldNumber: 11)
      }
      if !_storage._avgCheckDuration.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avgCheckDuration, fieldNumber: 12)
      }
      if _storage._veryBadCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._veryBadCount, fieldNumber: 13)
      }
      if _storage._veryBadRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._veryBadRate, fieldNumber: 14)
      }
      if _storage._badCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._badCount, fieldNumber: 15)
      }
      if _storage._badRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._badRate, fieldNumber: 16)
      }
      if _storage._qualifiedCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._qualifiedCount, fieldNumber: 17)
      }
      if _storage._qualifiedRate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._qualifiedRate, fieldNumber: 18)
      }
      if _storage._totalCheckWorkerCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalCheckWorkerCount, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_QualityWorkerReportStatistic, rhs: Api_Core_QualityWorkerReportStatistic) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._checkWorkerCount != rhs_storage._checkWorkerCount {return false}
        if _storage._checkCount != rhs_storage._checkCount {return false}
        if _storage._finishedCount != rhs_storage._finishedCount {return false}
        if _storage._finishedRate != rhs_storage._finishedRate {return false}
        if _storage._combineCheckCount != rhs_storage._combineCheckCount {return false}
        if _storage._combineCheckRate != rhs_storage._combineCheckRate {return false}
        if _storage._mustCheckCount != rhs_storage._mustCheckCount {return false}
        if _storage._mustCheckRate != rhs_storage._mustCheckRate {return false}
        if _storage._reviewCheckCount != rhs_storage._reviewCheckCount {return false}
        if _storage._reviewCheckRate != rhs_storage._reviewCheckRate {return false}
        if _storage._totalCheckDuration != rhs_storage._totalCheckDuration {return false}
        if _storage._avgCheckDuration != rhs_storage._avgCheckDuration {return false}
        if _storage._veryBadCount != rhs_storage._veryBadCount {return false}
        if _storage._veryBadRate != rhs_storage._veryBadRate {return false}
        if _storage._badCount != rhs_storage._badCount {return false}
        if _storage._badRate != rhs_storage._badRate {return false}
        if _storage._qualifiedCount != rhs_storage._qualifiedCount {return false}
        if _storage._qualifiedRate != rhs_storage._qualifiedRate {return false}
        if _storage._totalCheckWorkerCount != rhs_storage._totalCheckWorkerCount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_QualityWorkerReportResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QualityWorkerReportResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "statistic"),
    2: .same(proto: "list"),
    3: .same(proto: "total"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._statistic) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.total) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._statistic {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_QualityWorkerReportResponse, rhs: Api_Core_QualityWorkerReportResponse) -> Bool {
    if lhs._statistic != rhs._statistic {return false}
    if lhs.list != rhs.list {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_QualityCheckWorkerNameAndIdMapEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QualityCheckWorkerNameAndIdMapEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "check_worker_id"),
    2: .standard(proto: "check_worker_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.checkWorkerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.checkWorkerName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.checkWorkerID != 0 {
      try visitor.visitSingularInt32Field(value: self.checkWorkerID, fieldNumber: 1)
    }
    if !self.checkWorkerName.isEmpty {
      try visitor.visitSingularStringField(value: self.checkWorkerName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_QualityCheckWorkerNameAndIdMapEntity, rhs: Api_Core_QualityCheckWorkerNameAndIdMapEntity) -> Bool {
    if lhs.checkWorkerID != rhs.checkWorkerID {return false}
    if lhs.checkWorkerName != rhs.checkWorkerName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_QualityCheckWorkerNameAndIdMapListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QualityCheckWorkerNameAndIdMapListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_QualityCheckWorkerNameAndIdMapListResponse, rhs: Api_Core_QualityCheckWorkerNameAndIdMapListResponse) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_WorkersMapUseBySearchEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkersMapUseBySearchEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "worker_id"),
    2: .standard(proto: "worker_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.workerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.workerName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.workerID != 0 {
      try visitor.visitSingularInt32Field(value: self.workerID, fieldNumber: 1)
    }
    if !self.workerName.isEmpty {
      try visitor.visitSingularStringField(value: self.workerName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_WorkersMapUseBySearchEntity, rhs: Api_Core_WorkersMapUseBySearchEntity) -> Bool {
    if lhs.workerID != rhs.workerID {return false}
    if lhs.workerName != rhs.workerName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_WorkersMapUseBySearchEntityList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkersMapUseBySearchEntityList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_WorkersMapUseBySearchEntityList, rhs: Api_Core_WorkersMapUseBySearchEntityList) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_WorkerGroupNameIdEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerGroupNameIdEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "work_group_id"),
    2: .standard(proto: "worker_group_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.workGroupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.workerGroupName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.workGroupID != 0 {
      try visitor.visitSingularInt32Field(value: self.workGroupID, fieldNumber: 1)
    }
    if !self.workerGroupName.isEmpty {
      try visitor.visitSingularStringField(value: self.workerGroupName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_WorkerGroupNameIdEntity, rhs: Api_Core_WorkerGroupNameIdEntity) -> Bool {
    if lhs.workGroupID != rhs.workGroupID {return false}
    if lhs.workerGroupName != rhs.workerGroupName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_WorkerGroupAndWorkersListUseBySearchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerGroupAndWorkersListUseBySearchResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .standard(proto: "worker_list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Api_Core_WorkersMapUseBySearchEntityList>.self, value: &self.workerList) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.workerList.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Api_Core_WorkersMapUseBySearchEntityList>.self, value: self.workerList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_WorkerGroupAndWorkersListUseBySearchResponse, rhs: Api_Core_WorkerGroupAndWorkersListUseBySearchResponse) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.workerList != rhs.workerList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_CheckedWorkerQualityViewListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckedWorkerQualityViewListRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
    3: .standard(proto: "check_worker_group_id"),
    4: .standard(proto: "worker_id"),
    5: .standard(proto: "check_worker_account"),
    6: .standard(proto: "user_level"),
    7: .standard(proto: "user_id"),
    8: .standard(proto: "service_duration"),
    9: .standard(proto: "check_type"),
    10: .standard(proto: "check_worker_id"),
    11: .standard(proto: "check_duration"),
    12: .standard(proto: "check_score"),
    13: .standard(proto: "is_review"),
    14: .same(proto: "page"),
    15: .same(proto: "pageSize"),
    16: .standard(proto: "sort_param"),
    17: .standard(proto: "sort_type"),
    18: .standard(proto: "worker_account"),
    19: .same(proto: "source"),
  ]

  fileprivate class _StorageClass {
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _checkWorkerGroupID: Int32 = 0
    var _workerID: Int32 = 0
    var _checkWorkerAccount: String = String()
    var _userLevel: Int32 = 0
    var _userID: String = String()
    var _serviceDuration: Int32 = 0
    var _checkType: Api_Common_WorkerCheckType? = nil
    var _checkWorkerID: Int32 = 0
    var _checkDuration: Int32 = 0
    var _checkScore: Api_Common_WorkerScoreType? = nil
    var _isReview: Bool? = nil
    var _page: Int32 = 0
    var _pageSize: Int32 = 0
    var _sortParam: Api_Core_CheckedWorkerQualityViewListSortParam = .firstSendTime
    var _sortType: CommonSortType = .descend
    var _workerAccount: String = String()
    var _source: Api_Common_CheckViewSource = .workerQualitySource

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _startTime = source._startTime
      _endTime = source._endTime
      _checkWorkerGroupID = source._checkWorkerGroupID
      _workerID = source._workerID
      _checkWorkerAccount = source._checkWorkerAccount
      _userLevel = source._userLevel
      _userID = source._userID
      _serviceDuration = source._serviceDuration
      _checkType = source._checkType
      _checkWorkerID = source._checkWorkerID
      _checkDuration = source._checkDuration
      _checkScore = source._checkScore
      _isReview = source._isReview
      _page = source._page
      _pageSize = source._pageSize
      _sortParam = source._sortParam
      _sortType = source._sortType
      _workerAccount = source._workerAccount
      _source = source._source
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._endTime) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._checkWorkerGroupID) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._workerID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._checkWorkerAccount) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._userLevel) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._serviceDuration) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._checkType) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._checkWorkerID) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._checkDuration) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._checkScore) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._isReview) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._page) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._pageSize) }()
        case 16: try { try decoder.decodeSingularEnumField(value: &_storage._sortParam) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._sortType) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._workerAccount) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._source) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._checkWorkerGroupID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._checkWorkerGroupID, fieldNumber: 3)
      }
      if _storage._workerID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._workerID, fieldNumber: 4)
      }
      if !_storage._checkWorkerAccount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._checkWorkerAccount, fieldNumber: 5)
      }
      if _storage._userLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._userLevel, fieldNumber: 6)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 7)
      }
      if _storage._serviceDuration != 0 {
        try visitor.visitSingularInt32Field(value: _storage._serviceDuration, fieldNumber: 8)
      }
      try { if let v = _storage._checkType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
      } }()
      if _storage._checkWorkerID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._checkWorkerID, fieldNumber: 10)
      }
      if _storage._checkDuration != 0 {
        try visitor.visitSingularInt32Field(value: _storage._checkDuration, fieldNumber: 11)
      }
      try { if let v = _storage._checkScore {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._isReview {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      if _storage._page != 0 {
        try visitor.visitSingularInt32Field(value: _storage._page, fieldNumber: 14)
      }
      if _storage._pageSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pageSize, fieldNumber: 15)
      }
      if _storage._sortParam != .firstSendTime {
        try visitor.visitSingularEnumField(value: _storage._sortParam, fieldNumber: 16)
      }
      if _storage._sortType != .descend {
        try visitor.visitSingularEnumField(value: _storage._sortType, fieldNumber: 17)
      }
      if !_storage._workerAccount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._workerAccount, fieldNumber: 18)
      }
      if _storage._source != .workerQualitySource {
        try visitor.visitSingularEnumField(value: _storage._source, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_CheckedWorkerQualityViewListRequest, rhs: Api_Core_CheckedWorkerQualityViewListRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._checkWorkerGroupID != rhs_storage._checkWorkerGroupID {return false}
        if _storage._workerID != rhs_storage._workerID {return false}
        if _storage._checkWorkerAccount != rhs_storage._checkWorkerAccount {return false}
        if _storage._userLevel != rhs_storage._userLevel {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._serviceDuration != rhs_storage._serviceDuration {return false}
        if _storage._checkType != rhs_storage._checkType {return false}
        if _storage._checkWorkerID != rhs_storage._checkWorkerID {return false}
        if _storage._checkDuration != rhs_storage._checkDuration {return false}
        if _storage._checkScore != rhs_storage._checkScore {return false}
        if _storage._isReview != rhs_storage._isReview {return false}
        if _storage._page != rhs_storage._page {return false}
        if _storage._pageSize != rhs_storage._pageSize {return false}
        if _storage._sortParam != rhs_storage._sortParam {return false}
        if _storage._sortType != rhs_storage._sortType {return false}
        if _storage._workerAccount != rhs_storage._workerAccount {return false}
        if _storage._source != rhs_storage._source {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_CheckedWorkerQualityViewEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckedWorkerQualityViewEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "user_nickname"),
    3: .standard(proto: "user_ip"),
    4: .standard(proto: "user_location"),
    5: .same(proto: "os"),
    6: .standard(proto: "user_level"),
    7: .standard(proto: "first_send_time"),
    8: .standard(proto: "last_send_time"),
    9: .standard(proto: "service_duration"),
    10: .standard(proto: "worker_id"),
    11: .standard(proto: "worker_name"),
    12: .standard(proto: "client_message_count"),
    13: .standard(proto: "worker_message_count"),
    14: .standard(proto: "check_duration"),
    15: .standard(proto: "check_score"),
    16: .standard(proto: "review_check_score"),
    17: .standard(proto: "question_type"),
    18: .same(proto: "content"),
    19: .standard(proto: "review_content"),
    20: .standard(proto: "create_time"),
    21: .standard(proto: "review_time"),
    22: .standard(proto: "score_worker_name"),
    23: .standard(proto: "score_worker_id"),
    24: .standard(proto: "review_worker_name"),
    25: .standard(proto: "review_worker_id"),
    26: .standard(proto: "check_type"),
    27: .standard(proto: "score_time"),
    28: .standard(proto: "chat_id"),
    29: .standard(proto: "binding_session_id"),
    30: .same(proto: "id"),
    31: .standard(proto: "check_log"),
    32: .same(proto: "workerQualitySessions"),
    33: .standard(proto: "recharge_order_no"),
    34: .standard(proto: "recharge_order_time"),
    35: .standard(proto: "user_register_source"),
    36: .standard(proto: "last_push_time"),
    37: .standard(proto: "assign_time"),
  ]

  fileprivate class _StorageClass {
    var _userID: Int32 = 0
    var _userNickname: String = String()
    var _userIp: String = String()
    var _userLocation: String = String()
    var _os: String = String()
    var _userLevel: String = String()
    var _firstSendTime: Int64 = 0
    var _lastSendTime: Int64 = 0
    var _serviceDuration: String = String()
    var _workerID: Int32 = 0
    var _workerName: String = String()
    var _clientMessageCount: Int32 = 0
    var _workerMessageCount: Int32 = 0
    var _checkDuration: String = String()
    var _checkScore: Api_Common_WorkerScoreType = .wstUnknown
    var _reviewCheckScore: Api_Common_WorkerScoreType = .wstUnknown
    var _questionType: [String] = []
    var _content: String = String()
    var _reviewContent: String = String()
    var _createTime: Int64 = 0
    var _reviewTime: Int64 = 0
    var _scoreWorkerName: String = String()
    var _scoreWorkerID: Int32 = 0
    var _reviewWorkerName: String = String()
    var _reviewWorkerID: Int32 = 0
    var _checkType: Api_Common_WorkerCheckType = .wqtCommon
    var _scoreTime: Int64 = 0
    var _chatID: Int64 = 0
    var _bindingSessionID: Int64 = 0
    var _id: Int64 = 0
    var _checkLog: [Api_Core_QualitySessionReadLog] = []
    var _workerQualitySessions: [SwiftProtobuf.Google_Protobuf_Any] = []
    var _rechargeOrderNo: String = String()
    var _rechargeOrderTime: String = String()
    var _userRegisterSource: String = String()
    var _lastPushTime: UInt32 = 0
    var _assignTime: UInt32 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _userID = source._userID
      _userNickname = source._userNickname
      _userIp = source._userIp
      _userLocation = source._userLocation
      _os = source._os
      _userLevel = source._userLevel
      _firstSendTime = source._firstSendTime
      _lastSendTime = source._lastSendTime
      _serviceDuration = source._serviceDuration
      _workerID = source._workerID
      _workerName = source._workerName
      _clientMessageCount = source._clientMessageCount
      _workerMessageCount = source._workerMessageCount
      _checkDuration = source._checkDuration
      _checkScore = source._checkScore
      _reviewCheckScore = source._reviewCheckScore
      _questionType = source._questionType
      _content = source._content
      _reviewContent = source._reviewContent
      _createTime = source._createTime
      _reviewTime = source._reviewTime
      _scoreWorkerName = source._scoreWorkerName
      _scoreWorkerID = source._scoreWorkerID
      _reviewWorkerName = source._reviewWorkerName
      _reviewWorkerID = source._reviewWorkerID
      _checkType = source._checkType
      _scoreTime = source._scoreTime
      _chatID = source._chatID
      _bindingSessionID = source._bindingSessionID
      _id = source._id
      _checkLog = source._checkLog
      _workerQualitySessions = source._workerQualitySessions
      _rechargeOrderNo = source._rechargeOrderNo
      _rechargeOrderTime = source._rechargeOrderTime
      _userRegisterSource = source._userRegisterSource
      _lastPushTime = source._lastPushTime
      _assignTime = source._assignTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._userID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._userNickname) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._userIp) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._userLocation) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._os) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._userLevel) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._firstSendTime) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._lastSendTime) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._serviceDuration) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._workerID) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._workerName) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._clientMessageCount) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._workerMessageCount) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._checkDuration) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._checkScore) }()
        case 16: try { try decoder.decodeSingularEnumField(value: &_storage._reviewCheckScore) }()
        case 17: try { try decoder.decodeRepeatedStringField(value: &_storage._questionType) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._content) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._reviewContent) }()
        case 20: try { try decoder.decodeSingularInt64Field(value: &_storage._createTime) }()
        case 21: try { try decoder.decodeSingularInt64Field(value: &_storage._reviewTime) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._scoreWorkerName) }()
        case 23: try { try decoder.decodeSingularInt32Field(value: &_storage._scoreWorkerID) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._reviewWorkerName) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._reviewWorkerID) }()
        case 26: try { try decoder.decodeSingularEnumField(value: &_storage._checkType) }()
        case 27: try { try decoder.decodeSingularInt64Field(value: &_storage._scoreTime) }()
        case 28: try { try decoder.decodeSingularInt64Field(value: &_storage._chatID) }()
        case 29: try { try decoder.decodeSingularInt64Field(value: &_storage._bindingSessionID) }()
        case 30: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 31: try { try decoder.decodeRepeatedMessageField(value: &_storage._checkLog) }()
        case 32: try { try decoder.decodeRepeatedMessageField(value: &_storage._workerQualitySessions) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._rechargeOrderNo) }()
        case 34: try { try decoder.decodeSingularStringField(value: &_storage._rechargeOrderTime) }()
        case 35: try { try decoder.decodeSingularStringField(value: &_storage._userRegisterSource) }()
        case 36: try { try decoder.decodeSingularUInt32Field(value: &_storage._lastPushTime) }()
        case 37: try { try decoder.decodeSingularUInt32Field(value: &_storage._assignTime) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._userID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._userID, fieldNumber: 1)
      }
      if !_storage._userNickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userNickname, fieldNumber: 2)
      }
      if !_storage._userIp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userIp, fieldNumber: 3)
      }
      if !_storage._userLocation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userLocation, fieldNumber: 4)
      }
      if !_storage._os.isEmpty {
        try visitor.visitSingularStringField(value: _storage._os, fieldNumber: 5)
      }
      if !_storage._userLevel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userLevel, fieldNumber: 6)
      }
      if _storage._firstSendTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._firstSendTime, fieldNumber: 7)
      }
      if _storage._lastSendTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastSendTime, fieldNumber: 8)
      }
      if !_storage._serviceDuration.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceDuration, fieldNumber: 9)
      }
      if _storage._workerID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._workerID, fieldNumber: 10)
      }
      if !_storage._workerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._workerName, fieldNumber: 11)
      }
      if _storage._clientMessageCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._clientMessageCount, fieldNumber: 12)
      }
      if _storage._workerMessageCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._workerMessageCount, fieldNumber: 13)
      }
      if !_storage._checkDuration.isEmpty {
        try visitor.visitSingularStringField(value: _storage._checkDuration, fieldNumber: 14)
      }
      if _storage._checkScore != .wstUnknown {
        try visitor.visitSingularEnumField(value: _storage._checkScore, fieldNumber: 15)
      }
      if _storage._reviewCheckScore != .wstUnknown {
        try visitor.visitSingularEnumField(value: _storage._reviewCheckScore, fieldNumber: 16)
      }
      if !_storage._questionType.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._questionType, fieldNumber: 17)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 18)
      }
      if !_storage._reviewContent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reviewContent, fieldNumber: 19)
      }
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 20)
      }
      if _storage._reviewTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._reviewTime, fieldNumber: 21)
      }
      if !_storage._scoreWorkerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scoreWorkerName, fieldNumber: 22)
      }
      if _storage._scoreWorkerID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._scoreWorkerID, fieldNumber: 23)
      }
      if !_storage._reviewWorkerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reviewWorkerName, fieldNumber: 24)
      }
      if _storage._reviewWorkerID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reviewWorkerID, fieldNumber: 25)
      }
      if _storage._checkType != .wqtCommon {
        try visitor.visitSingularEnumField(value: _storage._checkType, fieldNumber: 26)
      }
      if _storage._scoreTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._scoreTime, fieldNumber: 27)
      }
      if _storage._chatID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._chatID, fieldNumber: 28)
      }
      if _storage._bindingSessionID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._bindingSessionID, fieldNumber: 29)
      }
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 30)
      }
      if !_storage._checkLog.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._checkLog, fieldNumber: 31)
      }
      if !_storage._workerQualitySessions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._workerQualitySessions, fieldNumber: 32)
      }
      if !_storage._rechargeOrderNo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rechargeOrderNo, fieldNumber: 33)
      }
      if !_storage._rechargeOrderTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rechargeOrderTime, fieldNumber: 34)
      }
      if !_storage._userRegisterSource.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userRegisterSource, fieldNumber: 35)
      }
      if _storage._lastPushTime != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lastPushTime, fieldNumber: 36)
      }
      if _storage._assignTime != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._assignTime, fieldNumber: 37)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_CheckedWorkerQualityViewEntity, rhs: Api_Core_CheckedWorkerQualityViewEntity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._userNickname != rhs_storage._userNickname {return false}
        if _storage._userIp != rhs_storage._userIp {return false}
        if _storage._userLocation != rhs_storage._userLocation {return false}
        if _storage._os != rhs_storage._os {return false}
        if _storage._userLevel != rhs_storage._userLevel {return false}
        if _storage._firstSendTime != rhs_storage._firstSendTime {return false}
        if _storage._lastSendTime != rhs_storage._lastSendTime {return false}
        if _storage._serviceDuration != rhs_storage._serviceDuration {return false}
        if _storage._workerID != rhs_storage._workerID {return false}
        if _storage._workerName != rhs_storage._workerName {return false}
        if _storage._clientMessageCount != rhs_storage._clientMessageCount {return false}
        if _storage._workerMessageCount != rhs_storage._workerMessageCount {return false}
        if _storage._checkDuration != rhs_storage._checkDuration {return false}
        if _storage._checkScore != rhs_storage._checkScore {return false}
        if _storage._reviewCheckScore != rhs_storage._reviewCheckScore {return false}
        if _storage._questionType != rhs_storage._questionType {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._reviewContent != rhs_storage._reviewContent {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._reviewTime != rhs_storage._reviewTime {return false}
        if _storage._scoreWorkerName != rhs_storage._scoreWorkerName {return false}
        if _storage._scoreWorkerID != rhs_storage._scoreWorkerID {return false}
        if _storage._reviewWorkerName != rhs_storage._reviewWorkerName {return false}
        if _storage._reviewWorkerID != rhs_storage._reviewWorkerID {return false}
        if _storage._checkType != rhs_storage._checkType {return false}
        if _storage._scoreTime != rhs_storage._scoreTime {return false}
        if _storage._chatID != rhs_storage._chatID {return false}
        if _storage._bindingSessionID != rhs_storage._bindingSessionID {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._checkLog != rhs_storage._checkLog {return false}
        if _storage._workerQualitySessions != rhs_storage._workerQualitySessions {return false}
        if _storage._rechargeOrderNo != rhs_storage._rechargeOrderNo {return false}
        if _storage._rechargeOrderTime != rhs_storage._rechargeOrderTime {return false}
        if _storage._userRegisterSource != rhs_storage._userRegisterSource {return false}
        if _storage._lastPushTime != rhs_storage._lastPushTime {return false}
        if _storage._assignTime != rhs_storage._assignTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_CheckerWorkerQualityViewStatistic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckerWorkerQualityViewStatistic"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "worker_count"),
    2: .standard(proto: "check_chat_count"),
    3: .standard(proto: "check_duration"),
    4: .standard(proto: "must_check_count"),
    5: .standard(proto: "combine_check_count"),
    6: .standard(proto: "review_check_count"),
    7: .standard(proto: "excellent_count"),
    8: .standard(proto: "normal_count"),
    9: .standard(proto: "very_bad_count"),
    10: .standard(proto: "bad_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.workerCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.checkChatCount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.checkDuration) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.mustCheckCount) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.combineCheckCount) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.reviewCheckCount) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.excellentCount) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.normalCount) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.veryBadCount) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.badCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.workerCount != 0 {
      try visitor.visitSingularInt32Field(value: self.workerCount, fieldNumber: 1)
    }
    if self.checkChatCount != 0 {
      try visitor.visitSingularInt32Field(value: self.checkChatCount, fieldNumber: 2)
    }
    if self.checkDuration != 0 {
      try visitor.visitSingularInt64Field(value: self.checkDuration, fieldNumber: 3)
    }
    if self.mustCheckCount != 0 {
      try visitor.visitSingularInt32Field(value: self.mustCheckCount, fieldNumber: 4)
    }
    if self.combineCheckCount != 0 {
      try visitor.visitSingularInt32Field(value: self.combineCheckCount, fieldNumber: 5)
    }
    if self.reviewCheckCount != 0 {
      try visitor.visitSingularInt32Field(value: self.reviewCheckCount, fieldNumber: 6)
    }
    if self.excellentCount != 0 {
      try visitor.visitSingularInt32Field(value: self.excellentCount, fieldNumber: 7)
    }
    if self.normalCount != 0 {
      try visitor.visitSingularInt32Field(value: self.normalCount, fieldNumber: 8)
    }
    if self.veryBadCount != 0 {
      try visitor.visitSingularInt32Field(value: self.veryBadCount, fieldNumber: 9)
    }
    if self.badCount != 0 {
      try visitor.visitSingularInt32Field(value: self.badCount, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_CheckerWorkerQualityViewStatistic, rhs: Api_Core_CheckerWorkerQualityViewStatistic) -> Bool {
    if lhs.workerCount != rhs.workerCount {return false}
    if lhs.checkChatCount != rhs.checkChatCount {return false}
    if lhs.checkDuration != rhs.checkDuration {return false}
    if lhs.mustCheckCount != rhs.mustCheckCount {return false}
    if lhs.combineCheckCount != rhs.combineCheckCount {return false}
    if lhs.reviewCheckCount != rhs.reviewCheckCount {return false}
    if lhs.excellentCount != rhs.excellentCount {return false}
    if lhs.normalCount != rhs.normalCount {return false}
    if lhs.veryBadCount != rhs.veryBadCount {return false}
    if lhs.badCount != rhs.badCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_CheckedWorkerQualityViewListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckedWorkerQualityViewListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "statistic"),
    3: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._statistic) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try { if let v = self._statistic {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_CheckedWorkerQualityViewListResponse, rhs: Api_Core_CheckedWorkerQualityViewListResponse) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs._statistic != rhs._statistic {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
