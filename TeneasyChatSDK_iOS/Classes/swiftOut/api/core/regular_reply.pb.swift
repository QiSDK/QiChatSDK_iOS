// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/core/regular_reply.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 创建
public struct Api_Core_RegularReplyCreateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 回复名称
  public var name: String = String()

  /// 间隔定时回复时间1，毫秒级
  public var regularTimeFrist: UInt64 = 0

  /// 回复内容1
  public var contentFrist: String = String()

  /// 间隔定时回复时间2，毫秒级
  public var regularTimeSecond: UInt64 = 0

  /// 回复内容2
  public var contentSecond: String = String()

  /// 咨询组Id
  public var consultID: Int64 = 0

  /// 0-全部关闭,1-开启回复1，2-开启回复2
  public var replyType: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_RegularReplyCreateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 删除
public struct Api_Core_RegularReplyDeleteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 主键id
  public var id: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 全量更新
public struct Api_Core_RegularReplyUpdateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 主键id 
  public var id: Int64 = 0

  /// 回复名称
  public var name: String = String()

  /// 间隔定时回复时间1，毫秒级
  public var regularTimeFrist: UInt64 = 0

  /// 回复内容1
  public var contentFrist: String = String()

  /// 间隔定时回复时间2，毫秒级
  public var regularTimeSecond: UInt64 = 0

  /// 回复内容2
  public var contentSecond: String = String()

  /// 咨询组Id
  public var consultID: Int64 = 0

  /// 0-全部关闭,1-开启回复1，2-开启回复2
  public var replyType: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 查询定时回复
public struct Api_Core_RegularReplyQueryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 指定主键id查询，可选
  public var id: Int64 = 0

  /// 指定咨询组Id查询，可选
  public var consultID: Int64 = 0

  /// 指定reply状态查询，可选
  public var replyType: Int32 = 0

  /// 页数
  public var page: UInt32 = 0

  /// 每页大小
  public var pageSize: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_RegularReplyItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 主键id 
  public var id: Int64 = 0

  /// 回复名称
  public var name: String = String()

  /// 间隔定时回复时间1，毫秒级
  public var regularTimeFrist: UInt64 = 0

  /// 回复内容1
  public var contentFrist: String = String()

  /// 间隔定时回复时间2，毫秒级
  public var regularTimeSecond: UInt64 = 0

  /// 回复内容2
  public var contentSecond: String = String()

  /// 咨询组Id
  public var consultID: Int64 = 0

  /// 0-全部关闭,1-开启回复1，2-开启回复2
  public var replyType: Int32 = 0

  /// 绑定的咨询组name
  public var consultName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 返回未建立定时回复的咨询组下拉列表，去重
public struct Api_Core_UnBindRegularReplyConsultItemResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var items: [Api_Core_UnBindRegularReplyConsultItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 请求咨询列表
public struct Api_Core_UnBindRegularReplyConsultItemReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var consultID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 返回未建立定时回复的咨询组下来列表，去重
public struct Api_Core_UnBindRegularReplyConsultItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 咨询组id 
  public var consultID: Int64 = 0

  /// 绑定的咨询组name
  public var consultName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 查询定时回复返回
public struct Api_Core_RegularReplyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var items: [Api_Core_RegularReplyItem] = []

  public var total: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Core_RegularReplyCreateRequest: @unchecked Sendable {}
extension Api_Core_RegularReplyCreateResponse: @unchecked Sendable {}
extension Api_Core_RegularReplyDeleteRequest: @unchecked Sendable {}
extension Api_Core_RegularReplyUpdateRequest: @unchecked Sendable {}
extension Api_Core_RegularReplyQueryRequest: @unchecked Sendable {}
extension Api_Core_RegularReplyItem: @unchecked Sendable {}
extension Api_Core_UnBindRegularReplyConsultItemResponse: @unchecked Sendable {}
extension Api_Core_UnBindRegularReplyConsultItemReq: @unchecked Sendable {}
extension Api_Core_UnBindRegularReplyConsultItem: @unchecked Sendable {}
extension Api_Core_RegularReplyResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.core"

extension Api_Core_RegularReplyCreateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegularReplyCreateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "regular_time_frist"),
    3: .standard(proto: "content_frist"),
    4: .standard(proto: "regular_time_second"),
    5: .standard(proto: "content_second"),
    6: .standard(proto: "consult_id"),
    7: .standard(proto: "reply_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.regularTimeFrist) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contentFrist) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.regularTimeSecond) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.contentSecond) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.consultID) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.replyType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.regularTimeFrist != 0 {
      try visitor.visitSingularUInt64Field(value: self.regularTimeFrist, fieldNumber: 2)
    }
    if !self.contentFrist.isEmpty {
      try visitor.visitSingularStringField(value: self.contentFrist, fieldNumber: 3)
    }
    if self.regularTimeSecond != 0 {
      try visitor.visitSingularUInt64Field(value: self.regularTimeSecond, fieldNumber: 4)
    }
    if !self.contentSecond.isEmpty {
      try visitor.visitSingularStringField(value: self.contentSecond, fieldNumber: 5)
    }
    if self.consultID != 0 {
      try visitor.visitSingularInt64Field(value: self.consultID, fieldNumber: 6)
    }
    if self.replyType != 0 {
      try visitor.visitSingularInt32Field(value: self.replyType, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_RegularReplyCreateRequest, rhs: Api_Core_RegularReplyCreateRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.regularTimeFrist != rhs.regularTimeFrist {return false}
    if lhs.contentFrist != rhs.contentFrist {return false}
    if lhs.regularTimeSecond != rhs.regularTimeSecond {return false}
    if lhs.contentSecond != rhs.contentSecond {return false}
    if lhs.consultID != rhs.consultID {return false}
    if lhs.replyType != rhs.replyType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_RegularReplyCreateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegularReplyCreateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_RegularReplyCreateResponse, rhs: Api_Core_RegularReplyCreateResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_RegularReplyDeleteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegularReplyDeleteRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_RegularReplyDeleteRequest, rhs: Api_Core_RegularReplyDeleteRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_RegularReplyUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegularReplyUpdateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "regular_time_frist"),
    4: .standard(proto: "content_frist"),
    5: .standard(proto: "regular_time_second"),
    6: .standard(proto: "content_second"),
    7: .standard(proto: "consult_id"),
    8: .standard(proto: "reply_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.regularTimeFrist) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contentFrist) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.regularTimeSecond) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.contentSecond) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.consultID) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.replyType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.regularTimeFrist != 0 {
      try visitor.visitSingularUInt64Field(value: self.regularTimeFrist, fieldNumber: 3)
    }
    if !self.contentFrist.isEmpty {
      try visitor.visitSingularStringField(value: self.contentFrist, fieldNumber: 4)
    }
    if self.regularTimeSecond != 0 {
      try visitor.visitSingularUInt64Field(value: self.regularTimeSecond, fieldNumber: 5)
    }
    if !self.contentSecond.isEmpty {
      try visitor.visitSingularStringField(value: self.contentSecond, fieldNumber: 6)
    }
    if self.consultID != 0 {
      try visitor.visitSingularInt64Field(value: self.consultID, fieldNumber: 7)
    }
    if self.replyType != 0 {
      try visitor.visitSingularInt32Field(value: self.replyType, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_RegularReplyUpdateRequest, rhs: Api_Core_RegularReplyUpdateRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.regularTimeFrist != rhs.regularTimeFrist {return false}
    if lhs.contentFrist != rhs.contentFrist {return false}
    if lhs.regularTimeSecond != rhs.regularTimeSecond {return false}
    if lhs.contentSecond != rhs.contentSecond {return false}
    if lhs.consultID != rhs.consultID {return false}
    if lhs.replyType != rhs.replyType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_RegularReplyQueryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegularReplyQueryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "consult_id"),
    3: .standard(proto: "reply_type"),
    4: .same(proto: "page"),
    5: .same(proto: "pageSize"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.consultID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.replyType) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.page) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.consultID != 0 {
      try visitor.visitSingularInt64Field(value: self.consultID, fieldNumber: 2)
    }
    if self.replyType != 0 {
      try visitor.visitSingularInt32Field(value: self.replyType, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageSize, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_RegularReplyQueryRequest, rhs: Api_Core_RegularReplyQueryRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.consultID != rhs.consultID {return false}
    if lhs.replyType != rhs.replyType {return false}
    if lhs.page != rhs.page {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_RegularReplyItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegularReplyItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "regular_time_frist"),
    4: .standard(proto: "content_frist"),
    5: .standard(proto: "regular_time_second"),
    6: .standard(proto: "content_second"),
    7: .standard(proto: "consult_id"),
    8: .standard(proto: "reply_type"),
    9: .standard(proto: "consult_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.regularTimeFrist) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contentFrist) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.regularTimeSecond) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.contentSecond) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.consultID) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.replyType) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.consultName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.regularTimeFrist != 0 {
      try visitor.visitSingularUInt64Field(value: self.regularTimeFrist, fieldNumber: 3)
    }
    if !self.contentFrist.isEmpty {
      try visitor.visitSingularStringField(value: self.contentFrist, fieldNumber: 4)
    }
    if self.regularTimeSecond != 0 {
      try visitor.visitSingularUInt64Field(value: self.regularTimeSecond, fieldNumber: 5)
    }
    if !self.contentSecond.isEmpty {
      try visitor.visitSingularStringField(value: self.contentSecond, fieldNumber: 6)
    }
    if self.consultID != 0 {
      try visitor.visitSingularInt64Field(value: self.consultID, fieldNumber: 7)
    }
    if self.replyType != 0 {
      try visitor.visitSingularInt32Field(value: self.replyType, fieldNumber: 8)
    }
    if !self.consultName.isEmpty {
      try visitor.visitSingularStringField(value: self.consultName, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_RegularReplyItem, rhs: Api_Core_RegularReplyItem) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.regularTimeFrist != rhs.regularTimeFrist {return false}
    if lhs.contentFrist != rhs.contentFrist {return false}
    if lhs.regularTimeSecond != rhs.regularTimeSecond {return false}
    if lhs.contentSecond != rhs.contentSecond {return false}
    if lhs.consultID != rhs.consultID {return false}
    if lhs.replyType != rhs.replyType {return false}
    if lhs.consultName != rhs.consultName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_UnBindRegularReplyConsultItemResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnBindRegularReplyConsultItemResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_UnBindRegularReplyConsultItemResponse, rhs: Api_Core_UnBindRegularReplyConsultItemResponse) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_UnBindRegularReplyConsultItemReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnBindRegularReplyConsultItemReq"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consult_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.consultID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.consultID != 0 {
      try visitor.visitSingularInt32Field(value: self.consultID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_UnBindRegularReplyConsultItemReq, rhs: Api_Core_UnBindRegularReplyConsultItemReq) -> Bool {
    if lhs.consultID != rhs.consultID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_UnBindRegularReplyConsultItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnBindRegularReplyConsultItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consult_id"),
    2: .standard(proto: "consult_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.consultID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.consultName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.consultID != 0 {
      try visitor.visitSingularInt64Field(value: self.consultID, fieldNumber: 1)
    }
    if !self.consultName.isEmpty {
      try visitor.visitSingularStringField(value: self.consultName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_UnBindRegularReplyConsultItem, rhs: Api_Core_UnBindRegularReplyConsultItem) -> Bool {
    if lhs.consultID != rhs.consultID {return false}
    if lhs.consultName != rhs.consultName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_RegularReplyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegularReplyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .same(proto: "total"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.total) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_RegularReplyResponse, rhs: Api_Core_RegularReplyResponse) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
