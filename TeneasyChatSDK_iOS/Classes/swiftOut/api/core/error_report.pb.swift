// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/core/error_report.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 错误上传参数
public struct Api_Core_ErrorReportUploadRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Api_Common_ErrorReportUpload] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 错误列表参数
public struct Api_Core_ErrorReportListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var page: CommonPage {
    get {return _page ?? CommonPage()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  public var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  public mutating func clearPage() {self._page = nil}

  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  public var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  public var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  public mutating func clearEndTime() {self._endTime = nil}

  public var tenantID: Int32 = 0

  public var url: String = String()

  public var code: Int32 = 0

  public var codeType: Int32 = 0

  public var platform: Api_Common_Platform = .default

  public var ip: String = String()

  /// 上一页最后一条数据的id
  public var lastID: UInt64 {
    get {return _lastID ?? 0}
    set {_lastID = newValue}
  }
  /// Returns true if `lastID` has been explicitly set.
  public var hasLastID: Bool {return self._lastID != nil}
  /// Clears the value of `lastID`. Subsequent reads from it will return its default value.
  public mutating func clearLastID() {self._lastID = nil}

  /// 上一页最后一条数据的创建时间
  public var lastCreatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastCreatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastCreatedAt = newValue}
  }
  /// Returns true if `lastCreatedAt` has been explicitly set.
  public var hasLastCreatedAt: Bool {return self._lastCreatedAt != nil}
  /// Clears the value of `lastCreatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearLastCreatedAt() {self._lastCreatedAt = nil}

  /// 上一页/下一页
  public var pageUpDown: CommonPageUpDown = .pudDefault

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _page: CommonPage? = nil
  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastID: UInt64? = nil
  fileprivate var _lastCreatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// 错误列表参数
public struct Api_Core_ErrorReportListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var page: CommonPage {
    get {return _page ?? CommonPage()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  public var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  public mutating func clearPage() {self._page = nil}

  public var list: [Api_Common_ErrorReport] = []

  public var total: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _page: CommonPage? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Core_ErrorReportUploadRequest: @unchecked Sendable {}
extension Api_Core_ErrorReportListRequest: @unchecked Sendable {}
extension Api_Core_ErrorReportListResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.core"

extension Api_Core_ErrorReportUploadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorReportUploadRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ErrorReportUploadRequest, rhs: Api_Core_ErrorReportUploadRequest) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_ErrorReportListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorReportListRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "page"),
    2: .standard(proto: "start_time"),
    3: .standard(proto: "end_time"),
    4: .standard(proto: "tenant_id"),
    5: .same(proto: "url"),
    6: .same(proto: "code"),
    7: .standard(proto: "code_type"),
    8: .same(proto: "platform"),
    9: .same(proto: "ip"),
    10: .standard(proto: "last_id"),
    11: .standard(proto: "last_created_at"),
    12: .standard(proto: "page_up_down"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._page) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.tenantID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.codeType) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.platform) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.ip) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self._lastID) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._lastCreatedAt) }()
      case 12: try { try decoder.decodeSingularEnumField(value: &self.pageUpDown) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.tenantID != 0 {
      try visitor.visitSingularInt32Field(value: self.tenantID, fieldNumber: 4)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 5)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 6)
    }
    if self.codeType != 0 {
      try visitor.visitSingularInt32Field(value: self.codeType, fieldNumber: 7)
    }
    if self.platform != .default {
      try visitor.visitSingularEnumField(value: self.platform, fieldNumber: 8)
    }
    if !self.ip.isEmpty {
      try visitor.visitSingularStringField(value: self.ip, fieldNumber: 9)
    }
    try { if let v = self._lastID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._lastCreatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    if self.pageUpDown != .pudDefault {
      try visitor.visitSingularEnumField(value: self.pageUpDown, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ErrorReportListRequest, rhs: Api_Core_ErrorReportListRequest) -> Bool {
    if lhs._page != rhs._page {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.code != rhs.code {return false}
    if lhs.codeType != rhs.codeType {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.ip != rhs.ip {return false}
    if lhs._lastID != rhs._lastID {return false}
    if lhs._lastCreatedAt != rhs._lastCreatedAt {return false}
    if lhs.pageUpDown != rhs.pageUpDown {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_ErrorReportListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorReportListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "page"),
    2: .same(proto: "list"),
    3: .same(proto: "total"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._page) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.total) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_ErrorReportListResponse, rhs: Api_Core_ErrorReportListResponse) -> Bool {
    if lhs._page != rhs._page {return false}
    if lhs.list != rhs.list {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
